/*--*- C -*------------------------------------------------------------------*\
**$Author$
**$Date$ 
**$Revision$
**$URL$
\*---------------------------------------------------------------------------*/

/* uses: */
#include <tnode.h>
#include <tlist.h>

struct TNODE {
    /* Next and previous TNODEs in the allocated TNODE list; used to
       keep track of the allocated TNODEs and to prevent memory
       leaks: */
    TNODE *next_alloc, *prev_alloc;

    char *name;           /* name of the type ( 'int', 'real', etc. ) */
    char *suffix;         /* suffix that distinguishes constants of this type */
    TNODE *base_type;     /* base type of the current type, if any;
			     for functions this is a type of the
			     returned value */
    TLIST *interfaces;    /* lists interfaces that this class must
                             implement */
    TNODE *element_type;  /* for arrays, contains trype of the array
			     element; for 'addressof' type, contains
			     description of the addressed element. */
    TNODE *generic_type;  /* for a TK_PAIR TNODE, this is an generic
                             type for which the 'concrete_type' will
                             provide a particular interpretation. */
    TNODE *concrete_type; /* for a TK_PAIR TNODE, this TNODE will
                             provide the type of a particular
                             interpretation of a generic type in the
                             'generic_type' field; thsi intepretation
                             must be compatible with the type in the
                             'base_type' field (e.g. if the 'base_type
                             is a 'ref', then 'concrete_type' mys also
                             be implemented as 'ref'. */
    type_flag_t flags;    /* flags for different modifiers */

#ifdef USE_SERNO
    ssize_t serno;
#endif

    struct {
        type_kind_t kind; /* what kind of type is it: simple type,
			     struct, class, vector, function type, etc. */
        ssize_t size;     /* size of variable of a given type, in bytes */
        ssize_t nrefs;    /* number of fields in the type (structure, class,
			     etc.) that are references and should be garbage
			     collected */
        ssize_t max_vmt_offset;
                          /* maximum Virtual method offset assigned in
			     this type.*/
        ssize_t vmt_offset;
                          /* offset of the VMT in the static data area. */

        int interface_nr; /* For interfaces, a number assigned to the
                             interface; specifies also the interface
                             offset in the virtual method table. For
                             method types, specifies thye number of
                             the interface that declared this method;
                             it must be used when computing VMT offset
                             to call this method. */

        ssize_t attr_size;
                          /* attr_size is the size of the type set via
			     'type attributes', i.e. specified as
			     'size = 1234' statements in the type
			     definition; this size should be added to
			     the size of explicitely declared
			     fields. */
    } params;
        
    long rcount;          /* reference count */
    ssize_t rcount2;      /* The second reference count, used to count
                             references from cycles. If all references
                             come exclusively from other symbol table
                             nodes, and there are no more roots
                             elsewhere in the code, we should have
                             rcount == rcount2.  */

    DNODE *fields;        /* for structure types, contains a list of
			     definitions of the fields; for enum
			     types, contains a list of enumerated
			     values. */

    DNODE *operators;     /* Operators declared for this type */

    DNODE *conversions;   /* Operators to convert values into the
			     current type */

    DNODE *methods;       /* (Virtual) methods of the current class
                             or struct */

    DNODE *args;          /* declarations of the function's formal
			     arguments, NULL if function has no arguments */
    DNODE *return_vals;   /* value (or several values), returned by the
			     function */

    DNODE *constructor;   /* class constructor */
    DNODE *destructor;    /* class destructor, called from a garbage
                             collector */
    TNODE *next;
};
