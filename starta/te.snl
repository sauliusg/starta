//--*- Java -*--
// Starta compiler tests.
//
// Check "type erasure" generic types
//

use * from std;

inline bytecode procedure push( a : array of <type T>; value : <T> )
    -> array of <type T>
{
    APUSH
}

inline bytecode function nref( a : array ): int { NREF }

function print_array( array of <type T> a; function ( <T> element ) print )
{
    foreach var <T> e in a do
        print( e );
    enddo
}

function print_array_shared_generic( array of type X a; function ( X element ) print )
{
    foreach var X e in a do
        print( e );
    enddo
}

var mi = [ 1, 4, 8 ];

mi = push( mi, 2 );
. "length(mi) ==", length(mi);
. "nref(mi)   ==", nref(mi);
print_array( mi, function( int i ) { . i } );

. "----------------------------------------";

mi = [ 1, 4, 8 ];

mi = push( mi, 2 );
. "length(mi) ==", length(mi);
. "nref(mi)   ==", nref(mi);
print_array_shared_generic( mi, function( int i ) { . i } );

. "----------------------------------------";

var m = [ "alpha", "beta", "gamma" ];

. "length(m) ==", length(m);
. "nref(m)   ==", nref(m);
print_array( m, function( string i ) { . i } );

. "========================================";

m = push( m, "delta" );

. "length(m) ==", length(m);
. "nref(m)   ==", nref(m);
print_array( m, function( string i ) { . i } );

. "========================================";

m = push( m, "epsilon" );

. "length(m) ==", length(m);
. "nref(m)   ==", nref(m);
print_array( m, function( string i ) { . i } );
