//--*- Java -*--
// Starta compiler tests.
//
// Check "type erasure" generic types
//

use * from std;

inline bytecode procedure apush( a : array of <P>; value : <P> )
    -> array of <P>
{
    APUSH
}

// inline bytecode procedure gpush( a : array of type T; value : type T )
//     -> array of type T
// {
//     APUSH
// }

inline bytecode function nref( a : array ): int { NREF }

function print_array( array of <type X> a; function ( <X> element ) print )
{
    foreach var <X> e in a do
        print( e );
    enddo
}
// 
// function print_array_shared_generic( array of type Y a; function ( Y element ) print )
// {
//     foreach var Y e in a do
//         print( e );
//     enddo
// }

// var mi = [ 1, 4, 8 ];
// 
// mi = apush( mi, 2 );
// . "length(mi) ==", length(mi);
// . "nref(mi)   ==", nref(mi);
// print_array( mi, function( int i ) { . i } );
// 
// . "----------------------------------------";
// 
// mi = [ 1, 4, 8 ];
// 
// mi = push( mi, 2 );
// . "length(mi) ==", length(mi);
// . "nref(mi)   ==", nref(mi);
// print_array_shared_generic( mi, function( int i ) { . i } );
// 
// . "----------------------------------------";
//

struct S { name: string; position: int };

var mm: array of struct { name: string; position: int } = new S[0];
var m = [ "alpha", "beta", "gamma" ];

mm = apush( mm, struct S{ name => "first struct", position => 11 } );
mm = apush( mm, struct S{ name => "second struct", position => 222 } );
. "length(m) ==", length(m);
. "nref(m)   ==", nref(m);
//print_array( mm, function( string i ) { . i } );
print_array( mm, function( struct { name: string; position: int } s ) { . s.name, s.position } );

. "========================================";
// 
// m = push( m, "delta" );
// 
// . "length(m) ==", length(m);
// . "nref(m)   ==", nref(m);
// print_array( m, function( string i ) { . i } );
// 
// . "========================================";
// 
// m = push( m, "epsilon" );
// 
// . "length(m) ==", length(m);
// . "nref(m)   ==", nref(m);
// print_array( m, function( string i ) { . i } );
