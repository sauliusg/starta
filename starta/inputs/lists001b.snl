#
# Snail compiler tests
#
#
# Generic lists.
#

use * from std;

type list of T = ? : ref {
    next : list of T;
    value : T;

    operator "+" ( l1, l2 : list of T ) : list of T
    {
	if( l1 && l2 ) {
	    var r = l1[];
	    var q = r;
	    var p = l1.next;
	    while( p != null ) {
		q.next = p[];
		q = q.next;
		p = p.next;
	    }
	    q.next = l2;
	    return r
	} else {
	    if( l1 ) {
		return l1
	    } else {
		return l2
	    }
	}
    }; // operator "+"

} // type "list of T"

procedure cons( s : list of type T; l : list of type T = null ) : list of type T
{
    // return (list of T) { value => s, next => l }; // Segfaults...
    s.next = l;
    return s;
}

exception NullPointerException;

procedure head( l : list of type T ) : list of type T
{
    if( l ) {
        return l
    } else {
        raise NullPointerException( 123, "attempting to take head of a null list" );
    }
}

procedure tail( l : list of type T ) : list of type T
{
    if( l ) {
        return l.next
    } else {
        return null;
    }
}

operator "." (l : list of int)
{
    < l.value
}

operator "." (l : list of string)
{
    < l.value
}

operator "@list" (s : string): list of string
{
    return (s,);
}

operator "@list" (i : int): list of int
{
    return (i,);
}

var l, p : list of string;

var m = new int[100];

var s : list of string = cons( "one" );
// var s : list of string = new (list of string);

. head( s );

//s.value = "one";

l = s + p;

var n = new int[100];
var r = new int[100];

. head( l );
. head( s );
. head( s + cons( "two" ));
. head( s + l );
l = s + cons( "two" );
. head( tail( l ));

. head( cons( "alpha", cons( "beta", cons( "gamma" ))));
. "---";
. head( s );

. "---";

l = cons( "1", cons( "2" )) + cons( "three", cons( "four" ));

. head( l );
. head( tail( l ));
. head( l );
. head( tail( l ));
. head( tail( l ) + s );
. head( s + tail( l ));

. "#========================================================================";

var q : list of int;

q = cons( 123, cons( 45 ));

. head( q );
. head( tail( q ));
. head( tail( tail( q )));
