/*--*- Pascal -*-------------------------------------------------------------*\
**$Author: saulius $
**$Date: 2017-05-08 16:12:02 +0300 (Mon, 08 May 2017) $ 
**$Revision: 3477 $
**$URL: svn+ssh://saulius-grazulis.lt/home/saulius/svn-repositories/paskaitos/VU/software/trunk/bioinformatika-III-assignments/bin/pdbPr $
\*---------------------------------------------------------------------------*/
/*
  A Starta module to define description of a biomolecule atom, used
  for representing data from PDB, CIF and PDBx files.
*/

module BiomoleculeAtom;

use std;

type Atom = class
    begin
       recordType : string; (* ATOM or HETATM *)
       string atomName;
       long atomNumber;
       string residueName;
       long residueNumber;
       string chain;
       double B;
       double occupancy;
       double x, y, z; (* Cartesian coordinates *)

       (* the empty default constructor leaves all fields initialised
        with zeros and null pointers: *)
       constructor() {};
       
       constructor fromNumbers(recordType: string = "ATOM";
                               atomName: string;
                               atomNumber: long;
                               residueName: string;
                               residueNumber: long;
                               chainId: string;
                               x: double;
                               y: double;
                               z: double;
                               Bfactor: double = 0.0;
                               occupancy: double = 1.0
                               )
       begin
          self.recordType = recordType;
          self.atomName = atomName;
          self.atomNumber = atomNumber;
          self.residueName = residueName;
          self.residueNumber = residueNumber;
          self.chain = chainId;
          self.x = x;
          self.y = y;
          self.z = z;
          self.B = Bfactor;
          self.occupancy = occupancy;
       end;

       constructor fromStrings(recordType: string = "ATOM";
                               atomName: string;
                               atomNumber: string;
                               residueName: string;
                               residueNumber: string;
                               chainId: string;
                               x: string;
                               y: string;
                               z: string;
                               Bfactor: string = "0.0";
                               occupancy: string = "1.0"
                               )
       begin
          self.recordType = recordType;
          self.atomName = atomName;
          self.atomNumber = strtol( atomNumber );
          self.residueName = residueName;
          self.residueNumber = strtol( residueNumber );
          self.chain = chainId;
          self.x = strtod( x );
          self.y = strtod( y );
          self.z = strtod( z );
          self.B = strtod( Bfactor );
          self.occupancy = strtod( occupancy );
       end;

       method asString(): string
       begin
          return
          "%-6s " %% self.recordType _
          "%10d " %% self.atomNumber _
          "%5s "  %% self.atomName _
          "%5s "  %% self.residueName _
          "%10d " %% self.residueNumber _
          "%2s "  %% self.chain _
          "%10g " %% self.x _
          "%10g " %% self.y _
          "%10g " %% self.z _
          "%5g "  %% self.B _
          "%5g"   %% self.occupancy;
       end;
       
    end; (* class Atom *)

end module BiomoleculeAtom;
