#
# gc001.hlc
#
# SL language compiler tests: stress garbage collector.
# Creates a highly looped structure and looks if
# garbage collector deals with it properly.
#

include "stdtypes.slib";

type Node = null struct {
    head : Node;
    up : Node;
    left, right : Node; 
    nr : int;
    name : string;
};

procedure make_node( up, head : Node; nr : int; name : string ) : Node
{
    var n : Node;

    n = new Node;
    n.head = head;
    n.up = up;
    n.nr = nr;
    n.name = name;

    return n;
}

function make_tree() : Node
{
    var tree : Node;

    tree = new Node;
    tree.head = tree;
    tree.name = "root";

    var i : int;
    i = 1;

    tree.left  = make_node( tree, tree, i, "left node" );
    i++;
    tree.right = make_node( tree, tree, i, "right node" );
    i++;
    tree.right.left  = make_node( tree, tree.right, i, "right left" );
    i++;
    tree.right.right = make_node( tree, tree.right, i, "right right" );

    return tree;
}

inline bytecode function iwrite( i : int )    { IPRINT }
inline bytecode function swrite( s : string ) { SPRINT }
inline bytecode function nl() { NEWLINE }

function traverse( tree : Node )
{
    if( tree ) then
	iwrite( tree.nr );
        swrite( " " );
	swrite( tree.name );
        swrite( " " );
        nl();
	traverse( tree.left );
	traverse( tree.right );
    endif
}

var tree : Node;

tree = make_tree();
traverse( tree );
tree = null;

tree = make_tree();
traverse( tree );
