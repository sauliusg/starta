#
# Snail compiler tests
#
#
# Test exception handling in SL compiler.
#

include "stdtypes.slib"

procedure f( i : int ) : int
{
    return i + 1;
}

exception MathError;
exception ZeroDivision;

procedure g( i : int ) : int
{
    if( i != 0 ) then
        return f( i ) / i
    else
        . "about to raise exception in g()";

	# The following 'raise' statement contains wrong arguments (the
	# order of arguments is mixed up):

        raise ZeroDivision( "divison by 0 in g()", 12 )

    endif
}

. "Before try\n";

inline bytecode procedure iwrite( i : int )
{
    IPRINT
}

inline bytecode procedure swrite( s : string )
{
    SPRINT
}

inline bytecode procedure nl()
{
    NEWLINE
}

try {
    . "Within TRY block, before g() call";
    . g( 2 );
    . g( 1 );
    . g( 0 );
    . "Within TRY block, after g() call\n";
}

catch ZeroDivision {
    swrite( "Cought exception 11, and thats it...\n" );
}
catch MathError {
    swrite( "Cought exception 12, and thats it...\n" );
}
catch( var msg : string ) {
    swrite( "*** exception " );
    swrite( msg );
    nl();
}

. "After catch";
