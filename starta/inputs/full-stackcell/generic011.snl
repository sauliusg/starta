// --*- C -*--

// This file illustrates a problem with the current generic type
// design. When a structure is declared with the field of generic
// type, the assumptions about the field alignment, offset and
// position hold only when a generic type field is the last field in
// the structure.

use * from std;

function printer( s : string[] ) { . s[0] };
function iprinter( i : int[] ) { . i[0] };
function fprinter( x : float[] ) { . x[0] };
function dprinter( x : double[] ) { . x[0] };

procedure generic_procedure( s : null struct { int i; type T x[] }; 
                             function ( x : array of type T ) xprinter )
{
    xprinter( s.x );
}

struct IS { int i; int j[] }
struct FS { int i; float f[] }
struct DS { int i; double f[] }

try {
    var p = new null struct { int i; string name[] };
    p.name = ["Struct p"];
    generic_procedure( p, printer );
    generic_procedure( struct IS { i => 2, j => [12] }, iprinter );
    generic_procedure( struct FS { i => 2, f => [3.14] }, fprinter );
    generic_procedure( struct DS { i => 2, f => [3.14D] }, dprinter );
}
catch( var errno : int; var message : string ) {
    . message;
}
