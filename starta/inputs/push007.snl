//--*- Java -*--
// Compiler tests
//

use * from std;

class Integer {
    value: int;
    constructor( int i ) { self.value = i }
    operator "@int"( int i ): Integer
    {
        return new Integer(i);
    }
    operator ">"( Integer i, j ): bool
    {
        return i.value > j.value
    }
    operator "<"( Integer i, j ): bool
    {
        return i.value < j.value
    }
    operator "." (Integer i)
    {
        < i.value;
    }
}

inline bytecode procedure push( a : array of <type T>; value : <T> )
    -> array of <type T>
{
    APUSH
}

inline bytecode function nref( a : array ): int { NREF }
inline bytecode function capacity( a : array ): int { CAPACITY }

function print_array( array of <type T> a; function ( <T> element ) print )
{
    foreach var T e in a do
        print( e );
    enddo
}

var m = new Integer[0];

. "length(m) ==", length(m);
. "nref(m)   ==", nref(m);

var n = 0;
while true {
    m = push( m, n@Integer );
    var l = length(m);
    if l < 16 or l % 100 == 0 { . l, capacity(m) }
    n ++;
    do break if n > 10000
}
