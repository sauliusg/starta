#
# Snail compiler tests
#
#
# Test generic types
#

use * from std;

type R = generic ref;

procedure max( a, b : R; 
               gt : function( x, y : R ) -> (bool) ) : R
begin
    if( gt( a, b )) {
        return a
    } else {
        return b
    }
end

operator "." (m : int[])
{
    < m[0];
}

operator "." (m : float[])
{
    < m[0];
}

function gt_int( i, j : int[] ) : bool
begin
    return i[0] > j[0] ? true : false;
end

function gt_float( i, j : float[] ) : bool
begin
    return i[0] > j[0] ? true : false;
end

inline bytecode function gt_string( i, j : string ) : bool
begin
    STRGT
end

inline bytecode function le_string( i, j : string ) : bool
begin
    STRLE
end

. max( [7], [8], gt_int );
. max( [7.1], [5.5], gt_float );
. max( "more", "less", gt_string );
. max( "less", "more", gt_string );
. max( "more", "less", le_string );
. max( "less", "more", le_string );
