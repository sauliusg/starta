#
# Snail compiler tests
#
#
# Test generic types
#

use * from std;

class Integer {
    value: int;
    constructor( int i ) { self.value = i }
    operator "@int"( int i ): Integer
    {
        return new Integer(i);
    }
    operator ">"( Integer i, j ): bool
    {
        return i.value > j.value
    }
    operator "<"( Integer i, j ): bool
    {
        return i.value < j.value
    }
    operator "." (Integer i)
    {
        < i.value;
    }
}

class Float {
    value: float;
    constructor( float i ) { self.value = i }
    operator "@float"( float i ): Float
    {
        return new Float(i);
    }
    operator ">"( Float i, j ): bool
    {
        return i.value > j.value
    }
    operator "<"( Float i, j ): bool
    {
        return i.value < j.value
    }
    operator "." (Float i)
    {
        < i.value;
    }
}

procedure max( a, b : <type T>; 
               gt : function( x, y : <type T> ) -> (bool) ) : <type T>
begin
    if( gt( a, b )) {
        return a
    } else {
        return b
    }
end

function gt_int( i, j : Integer ) : bool
begin
    return i > j ? true : false;
end

function gt_float( i, j : Float ) : bool
begin
    return i > j ? true : false;
end

inline bytecode function gt_string( i, j : string ) : bool
begin
    STRGT
end

inline bytecode function le_string( i, j : string ) : bool
begin
    STRLE
end

. max( new Integer(7), 8@Integer, gt_int );
. max( new Float(7.1), 5.5@Float, gt_float );
. max( "more", "less", gt_string );
. max( "less", "more", gt_string );
. max( "more", "less", le_string );
. max( "less", "more", le_string );
