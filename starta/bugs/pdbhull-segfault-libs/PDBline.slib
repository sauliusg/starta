// --*- Pascal -*-------------------------------------------------------------
// $Author: saulius $
// $Date: 2017-05-15 15:36:33 +0300 (Mon, 15 May 2017) $ 
// $Revision: 3549 $
// $URL: svn+ssh://saulius-grazulis.lt/home/saulius/svn-repositories/paskaitos/VU/software/trunk/bioinformatika-III-assignments/lib/PDBline.slib $
// ---------------------------------------------------------------------------
// 
// A Starta module to parse a PDB line. Constructs BiomoleculeAtom out of it.
// 

module PDBline;

use std;
use BiomoleculeAtom;
use Strings;
use NumCheck;

exception INCORRECT_NUMBER_SYNTAX;

function check_real(s : string; msg: string )
begin
   if( !is_real( s )) begin
      raise INCORRECT_NUMBER_SYNTAX
      (
       "value '%s' " %% s _
       "for %s does not conform to real number syntax" %% msg
      )
   end;
end;

function check_integer(s : string; msg: string )
begin
   if( !is_real( s )) begin
      raise INCORRECT_NUMBER_SYNTAX
      (
       "value '%s' " %% s _
       "for %s does not conform to integer number syntax" %% msg
      )
   end;
end;

function split( line: string ): Atom
begin
   var altLoc = line[16:16];
   var insCode = line[26:26];

   var x = Strings::split(line[30:37])[0];
   var y = Strings::split(line[38:45])[0];
   var z = Strings::split(line[46:53])[0];
   var B = Strings::split(line[60:65])[0];
   var q = Strings::split(line[54:59])[0];

   var resNum  = Strings::split(line[22:25])[0];
   var atomNum = Strings::split(line[6:10])[0];

   check_real( x, "coordinate x" );
   check_real( y, "coordinate y" );
   check_real( z, "coordinate z" );
   check_real( B, "temperature factor" );
   check_real( q, "occupancy" );

   check_integer( resNum, "residue number" );
   check_integer( atomNum, "atom number" );

   return new Atom.fromStrings(
                               (*recodType     => *)
                               Strings::split(line[0:5])[0],
                               (*chemType      => *)
                               Strings::split(line[76:77])[0],
                               (*atomName      => *)
                               Strings::split(line[12:15])[0],
                               (*atomNumber    => *) atomNum,
                               (*residueName   => *)
                               Strings::split(line[17:19])[0],
                               (*residueNumber => *) resNum,
                               (*chainId       => *) line[21:21],
                               (*x             => *) x,
                               (*y             => *) y,
                               (*z             => *) z,
                               (*Bfactor       => *) B,
                               (*occupancy     => *) q,
                               (*altLoc        => *) altLoc == " " ? "" : altLoc,
                               (*insCode       => *) insCode == " " ? "" : insCode
                               );
end

end module PDBline;
