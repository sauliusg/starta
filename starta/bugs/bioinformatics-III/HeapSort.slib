// --*- C -*--
// Sorting; uses the heap sort method (complexity N*log(N)).

module HeapSort(type element = int);

use * from std;

// https://en.wikipedia.org/wiki/Heapsort

function iparent( int i ): int => (i-1)/2;
function ileft( int i ): int => 2*i + 1;
function iright( int i ): int => 2*i + 2;

procedure sift_down( a : array of element; ascending: bool = 1;
                     int start; int iend )
{
    var root = start;

    while( ileft(root) <= iend ) {
        var child = ileft(root);
        var swap = root;

        if( (ascending ? a[swap] < a[child] : a[swap] > a[child]) == true ) {
            swap = child;
        }
        if( child+1 <= iend &&
            (ascending ? a[swap] < a[child+1] : a[swap] > a[child+1]) ) {
            swap = child + 1;
        }
        if( swap == root ) {
            return;
        } else {
            a[root], a[swap] = a[swap], a[root];
            root = swap;
        }
    }
}

procedure heapify( a : array of element; ascending: bool = 1; int count )
{
    var start = iparent( count - 1 );

    while( start >= 0 ) {
        sift_down( a, ascending, start, count-1 );
        start --;
    }
}

procedure sort( a : array of element; ascending: bool = 1 ): array of element
{
    heapify( a, ascending, last(a) );

    var iend = last(a);

    while( iend > 0 ) {
        a[iend], a[0] = a[0], a[iend];
        iend --;
        sift_down(a, ascending, 0, iend);
    }

    return a;
}

function sorted( element m[]; ascending: bool = 1 ): element[]
{
    return sort( m[], ascending );
}

end module HeapSort;
