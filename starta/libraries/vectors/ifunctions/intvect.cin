/*--*- C -*------------------------------------------------------------------*\
**$Author$
**$Date$ 
**$Revision$
**$URL$
\*---------------------------------------------------------------------------*/

#ifdef I
#undef I
#endif

#define I num.@field@

/*
 * MKVECTOR Make (allocate) a vector -- a "packed array" of elements
 * that do not contain references, and leave the allocated reference
 * on the top of the stack. 
 * 
 * bytecode:
 * MKVECTOR element_size
 * 
 * stack:
 * length -> vector
 * 
 */

int @PREFIX1@MKVECTOR( INSTRUCTION_FN_ARGS )
{
    ssize_t element_size = istate.code[istate.ip+1].ssizeval;
    @type@ length = istate.ep[0].I;
    @type@ *ptr;

    TRACE_FUNCTION();

    ptr = bcalloc_array( element_size, length, /* nref */ 0, EXCEPTION );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 2;
}

/*
 * SUMINT   Sum all values in an array
 * 
 * bytecode:
 * SUMINT
 * 
 * stack:
 * float_vector -> float
 * 
 */

int @PREFIX1@SUMINT( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @type@ *array = STACKCELL_PTR( istate.ep[0] );
    alloccell_t* hdr = (alloccell_t*)array;
    llong sum = 0;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        for( i = 0; i < length; i++ ) {
            sum += array[i];
        }
    }
    STACKCELL_ZERO_PTR( istate.ep[0] );
    istate.ep[0].I = sum;

    return 1;
}
