#
# Generic lists.
#

package Lists;

use * from std;

type list of T = ? : ref {
    next : list of T;
    value : T;

    operator "+" ( l1, l2 : list of T ) : list of T
    {
	if( l1 && l2 ) {
	    var r = l1[];
	    var q = r;
	    var p = l1.next;
	    while( p != null ) {
		q.next = p[];
		q = q.next;
		p = p.next;
	    }
	    q.next = l2;
	    return r
	} else {
	    if( l1 ) {
		return l1
	    } else {
		return l2
	    }
	}
    }; // operator "+"

    inline bytecode operator "*" ( l : list of T ) : addressof
    { OFFSET %.value }

    inline bytecode operator "next" ( l : list of T )
    { NEXT %.next %.value }

} // type "list of T"

procedure cons( s : list of type T; l : list of type T = null ) : list of type T
{
    do s.next = l if s;
    return s;
}

procedure cat( l1, l2 : list of type T ) : list of type T
{
    return l1 + l2;
}

exception NullPointerException;

procedure tail( l : list of type T ) : list of type T
{
    if( l ) {
        return l.next
    } else {
        return null;
    }
}

end package Lists;
