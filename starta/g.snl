// --*- C -*--

// Test the new generic type implementation (a-la Ada) in interfaces.

use std;

type R = generic ref;

type F = ?class {
    f : float;

    method funny ( x : R ) -> R
    {
        return null;
    }
}

type G = ?class : F {
    n : int;
    r : R;
    s : string;

    method funny ( x : R ) -> R
    {
        return x;
    }

    method set_generic ( x : R )
    {
        self.r = x;
    }
};

procedure p()
{
    operator "."  (a : array of int)
    {
        for (var e in a) {
            < e, " ";
        }
    }

    var g : G = new G;

    . g->funny( "hi" );
    . g->funny( [1, 2, 3] );

    // Problematic calls -- type compatibility should fail, but
    // criterion is not clear (S.G. 2025-10-11):
    g->set_generic( [1, 2, 3] );
    g->set_generic( "hi" );
    // g->set_generic( 123 ); // OK: ERROR, incompatible types for function 'set_generic' argument nr. 2
}

p();
