
include "inputs/stdtypes.slib"

type Int = {
    size = sizeof native "int";
}

type Array [length] of T = {
    reference;
    size = sizeof native "void*";
    allocsize = length * sizeof(T);
}

type Array [const length] of T = {
    kind = indexable;
    size = length * sizeof(T);

    inline bytecode operator "[int]" ( m : array, i : int ): adressof T
        { INDEX sizeof(T) }
}

type String [length] of T = {
    reference;
    size = sizeof native "char*";
    allocsize = length * sizeof(T);
}

type List of T = {
    reference;
    size = sizeof(native "void*");
    allocsize = 3 * sizeof(native "void*");
}

type Hash of T = {
    reference;
    size = sizeof native "void*";
    allocsize = length * sizeof(T);

    inline bytecode operator "[string]" ( m : array, s : string ): adressof T
        { HASH }
}

type matrix = array [][] of float;

var m : matrix;

m = new float[100][200];

#
# Necessary new keywords:
# =======================
#    sizeof
#    native
#    addressof
#    (allocsizeof?)
#
