#
# HLC language bemchmark.
# 
# Matrix multiplication
#

type int = {
    size = sizeof native "int";
    kind = integer;
    inline bytecode operator "+" ( x : int; y : int ) : int
        { bytecode{ ADD }};
    inline bytecode operator "-" ( x : int; y : int ) : int
        { bytecode{ SUB }};
    inline bytecode operator "*" ( x : int; y : int ) : int
        { bytecode{ MUL }};
    inline bytecode operator "/" ( x : int; y : int ) : int
        { bytecode{ DIV }};
    inline bytecode operator "%" ( x : int; y : int ) : int
        { bytecode{ MOD }};
    inline bytecode operator "<" ( x : int; y : int ) : int
        { LT };
    inline bytecode operator "incvar" ()
        { INCVAR };
    inline bytecode operator "ldc" () : int
	{ LDCS };
    inline bytecode operator "jnz" ( i : int )
	{ JNZ };
    inline bytecode operator "[]" ( a : array; i : int ) : addressof
        { INDEX };
    inline bytecode operator "new[]" ( i : int ) : array
        { AALLOC %%element_nref }
};

## const N : int = 100;
var N : int; N = 100;

var i, j, k : int;
var m, n, p : array of array of int;

m = new (array of int)[N];
n = new (array of int)[N];
p = new (array of int)[N];

for( i = 0; i < N; i++ ) {
    m[i] = new int [N];
    n[i] = new int [N];
    p[i] = new int [N];
};

for( i = 0; i < N; i++ ) {
    for( j = 0; j < N; j++ ) {
        p[i][j] = 0;
        for( k = 0; k < N; k++ ) {
	    ## p[i][j] = p[i][j] + m[i][k] * n[k][j];
	    p[i][j] += m[i][k] * n[k][j];
	}
    }
}
