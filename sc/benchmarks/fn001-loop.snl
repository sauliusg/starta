#
# Snail language compiler tests
#
#
# Recursive function tests
#

#
# Calculate factorial using recursive funtion calls.
#

type int = {
    size = sizeof native "int";
    inline bytecode operator "+" ( x : int; y : int ) : int
        { bytecode{ ADD }};
    inline bytecode operator "-" ( x : int; y : int ) : int
        { bytecode{ SUB }};
    inline bytecode operator "*" ( x : int; y : int ) : int
        { bytecode{ MUL }};
    inline bytecode operator "/" ( x : int; y : int ) : int
        { bytecode{ DIV }};
    inline bytecode operator "%" ( x : int; y : int ) : int
        { bytecode{ MOD }};
    inline bytecode operator "<=" ( x : int; y : int ) : int
        { LE };
    inline bytecode operator ">" ( x : int; y : int ) : int
        { GT };
    inline bytecode operator "ldc" () : int
	{ LDCS };
    inline bytecode operator "jz" ( i : int )
	{ JZ };
    inline bytecode operator "jnz" ( i : int )
	{ JNZ };
    inline bytecode operator "loop" ( c : addressof; i : int )
	{ LOOP };
};

function factorial( n : int ) : int
{
    if n <= 1 then
        return 1;
    else
        return factorial( n - 1 ) * n;
    endif
};

var i : int;
var j : int;

for j = 1 to 10000 do
    for i = 0 to 10 do
        ## do nothing.
    enddo;
enddo;
