#
# Yes, it is Life!
#
# Worlds arguably most famous cellular automaton now implemented
# in HLC!
#
# Saulius Grazulis, Byjsk,    2003.10.17
# Saulius Grazulis, Kaunas,   2003.10.26
# Saulius Grazulis, Orenburg, 2006.08.18
#

## include "inputs/stdtypes.slib"

use std;

type Cell = int;

inline bytecode procedure writestr( s : string )
{
    SPRINT
}

procedure generation( newfield, field : array [][] of Cell ) : int, int
begin
    var i, j : int;
    var sum : Cell;
    var max_i : int = last( field );
    var max_j : int = last( field[0] );
    var i1, i2 : int;
    var j1, j2 : int;
    var nchanges, nones : int;

    for i = 0 to last( field ) do
        for j = 0 to last( field[i] ) do

	    i1 = i > 0 ? i - 1 : max_i;
	    i2 = i < max_i ? i + 1 : 0;
	    j1 = j > 0 ? j - 1 : max_j;
	    j2 = j < max_j ? j + 1 : 0;

            sum = field[i1][j1] + field[i1][j] +  field[i1][j2] +
                  field[i][j1]  + field[i][j2] +
                  field[i2][j1] + field[i2][j] +  field[i2][j2];

	    if( sum < 2 Cell or sum > 3 Cell ) then
                newfield[i][j] = 0 Cell
            else
                if( sum == 3 Cell ) then
                    newfield[i][j] = 1 Cell
                else
                    newfield[i][j] = field[i][j];
                endif
            endif

	    if( newfield[i][j] != field[i][j] ) then
		nchanges ++;
	    endif

	    if( newfield[i][j] == 1 Cell ) then
		nones ++;
	    endif

        enddo
    enddo

    return nchanges, nones;
end

procedure printfield( f : array [][] of Cell )
{
    var i, j : int;

    for i = 0 to last(f) {
        for j = 0 to last(f[i]) {
            writestr( f[i][j] == 0 Cell ? "." : "o" );
        }
        . "";
    }
    . "";
}

procedure sleep( length : long )
{
    var i : long;
    for( i = 0L; i < length; i++ ) { }   
}

inline bytecode function readln( file in ) : string
{
    BLDC 10 SFILEREADLN
}

function load_field( string filename ) : array [][] of Cell
{
    var input = fopen( filename, "r" );
    var line : string;
    var field, new_field : array [][] of Cell;

    var i : int = 0;

    while( (line=readln(input)) != null ) {
	new_field = new (array of Cell)[i+1];
	if field {
	    new_field := field;
	}
	field = new_field;
	field[i] = new Cell[length(line)-1];
	for var j = 0 to last(field[i]) {
	    if( line[j] != '.'c and line[j] != ' 'c ) {
		field[i][j] = 1 Cell;
	    }
	}
	i ++;
    }

    var max = 0;

    for i = 0 to last(field) {
	var len = length( field[i] );
	if max < len then max = len endif
    }

    for i = 0 to last(field) {
	var len = length( field[i] );
	if( len < max ) {
	    var new_line = new Cell[max];
	    new_line := field[i];
	    field[i] = new_line;
	}
    }

    fclose( input );
    return field;
}

program life( string argv[] );

if length( argv ) < 2 then

    . argv[0], ": please supply one file with Life " _
               "configuration as an argument"

else

function isdigit( c : char ) : bool
{
    return c == '0'c || c == '1'c || c == '2'c ||
           c == '3'c || c == '4'c || c == '5'c ||
           c == '6'c || c == '7'c || c == '8'c ||
           c == '9'c;
}

inline bytecode function digit( c : char ) : int
{
    SLDC '0' BLDI SUB HEXTEND EXTEND
}

function atoi( s : string ) : int
{
    var val = 0;

    for var i = 0 to last(s) do
	if( !isdigit( s[i] )) { break };
	val = val * 10 + digit( s[i] );
    enddo

    return val;
}

var generations = 1000;

var field : array [][] of Cell;

if( length(argv) > 2 ) then
    generations = atoi( argv[1] );
    field = load_field( argv[2] );
else
    field = load_field( argv[1] );
endif

var newfield : array [][] of Cell = new Cell[length(field)][length(field[0])];

printfield( field );

var gen : int = 1;

writestr( "\033[H\033[2J" );
//writestr( "\033[H" );
//writestr( "\033[2J" );
writestr( "\033[?25l" );

var nchanges, nones : int;

while( gen <= generations ) {
    nchanges, nones = generation( newfield, field );
    field, newfield = newfield, field;
    writestr( "\033[H" );
    writestr( "Generation: " );
    < gen;
    writestr( " Organisms: " );
    . nones;
    printfield( field );
    if( nchanges == 0 ) then
        writestr( "Stable configuration reached.\n" );
	break;
    endif
    //sleep( 800000 );
    gen ++;
}

writestr( "\033[?25h" );

endif
