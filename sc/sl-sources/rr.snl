#
# Rampant Randomness
#

use * from std;

// A cellular automaton pixel is 2 bits (4 values).

// A central cell and its 8 Moore neighboors
// (https://en.wikipedia.org/wiki/Moore_neighborhood) concatenated
// give 9*2 = 18 bits, or 2**18 possible values.

// A rules is formed by making a table with 2**18 entries, so that
// each combination of a central value and its 8 neightbours can be
// mapped into any arbitrary new value. Since pixel values are two
// bits, an 8-bit byte can hold 4 (2**2) such values, and therefore a
// rule can be packed into 2**18/2**2 = 2**16 = 64K bytes. A byte of a
// rule conveniently holds four new values for four possible central
// cell states, given the neighbourhood combination (8 * 2 = 16 bits,
// 2**16 = 64K possible index values).

// For an evolution to be possible, a rule-change rule must be
// present. The rule-change rule will depend on the value of the
// central cell, and either on the values of the neighbours. First, we
// need to select a second "mating" rule (the first rule will be
// always the central cell's rule). To specify this, we need 3 bits
// (for 8 combinations). Then we need to specify a cut position (2**16
// possibilities), and the exchange/no-exchange (crossing-over)
// possibility (2 variants, 1 bits). Thus, for rule change we need 20
// bits total. We can make this from: a) the central cell value (2
// bits); b) all neighbout values (16 bits) c) the rule's value for
// the central cell+neighbour combination (2 bits); total 16 + 2 + 2 =
// 20 bits.

function make_Life_rule( depth: int ) : array of byte
{
    var states = depth/4;
    var rule = new byte[states];

    var n = new int[8];

    for n[0] = 0 to 1 do
    for n[1] = 0 to 1 do
    for n[2] = 0 to 1 do
    for n[3] = 0 to 1 do
    for n[4] = 0 to 1 do
    for n[5] = 0 to 1 do
    for n[6] = 0 to 1 do
    for n[7] = 0 to 1 do

        var ruleval: int;

        var sum: int;
        for var i = 0 to last(n) do
            sum += n[i]
        enddo

        for var c = 0 to 1 do

            var newval: int;
            if( sum < 2 or sum > 3 ) then
                newval = 0
            else
                if( sum == 3 ) then
                    newval = 1
                else
                    newval = c;
                endif
            endif

            ruleval |= (newval shl (2*c));

        enddo

        var idx = n[0] shl 14 | 
                  n[1] shl 12 |
                  n[2] shl 10 |
                  n[3] shl  8 |
                  n[4] shl  6 |
                  n[5] shl  4 |
                  n[6] shl  2 |
                  n[7];

        rule[idx] = lowbyte(lowshort(ruleval));

    enddo
    enddo
    enddo
    enddo
    enddo
    enddo
    enddo
    enddo

    return rule;
}

inline bytecode function NOT( i: byte ): byte { BNOT };

use * from GNUrand48;
use * from Time;

GNUrand48::srand48(time());

function make_random_rule( depth: int ) : array of byte
{
    var states = depth/4;
    var rule = new byte[states];

    for var i = 0 to last(rule) do
        rule[i] = lowbyte(lowshort(lowint(GNUrand48::lrand48() & 255L)));
        if( i == 0 ) {
            rule[i] &= NOT(3 byte);
        }
    enddo

    return rule
}

type Cell = byte;

procedure generation( newfield, field : array [][] of Cell;
                      newrule, rule: array [][][] of byte ) : int
begin
    var i, j : int;
    var sum : int;
    var max_i : int = last( field );
    var max_j : int = last( field[0] );
    var i1, i2 : int;
    var j1, j2 : int;
    var nchanges: int;

    for i = 0 to last( field ) do
        for j = 0 to last( field[i] ) do

	    i1 = i > 0 ? i - 1 : max_i;
	    i2 = i < max_i ? i + 1 : 0;
	    j1 = j > 0 ? j - 1 : max_j;
	    j2 = j < max_j ? j + 1 : 0;

            sum = field[i1][j1] @int shl 14 |
                  field[i1][j]  @int shl 12 |
                  field[i1][j2] @int shl 10 |
                  field[i][j1]  @int shl  8 |
                  field[i][j2]  @int shl  6 |
                  field[i2][j1] @int shl  4 |
                  field[i2][j]  @int shl  2 |
                  field[i2][j2] @int;

            var rem : byte = field[i][j];

            var newval : byte;
            newfield[i][j] = newval =
                ((rule[i][j][sum] & (3 byte shl (2 byte * rem)))
                  shr (2 byte * rem)) & 3 byte;

            // The neighbour rule used to "mate" with the current one:
            // use 'newval' and 'rem' LSB to select the neighhbour to donate the rule;
            // use 'rem' second bit to decide whether to swap or not;
            // use 'sum' to decide where to cut the rule:
            var di = [i,  i,  i1, i1, i1, i2, i2, i2];
            var dj = [j1, j2, j1, j,  j2, j1, j,  j2];
            var deltaidx = (newval shl 1 byte) or (rem and 1 byte);
            var ri = di[deltaidx];
            var rj = dj[deltaidx];
            var mate_rule = rule[ri][rj];

            if( (rem and 2 byte) == 0 byte ) {
                newrule[i][j] := mate_rule[0..sum];
            } else {
                newrule[i][j] := mate_rule[last(mate_rule)-sum..last(mate_rule)];
            }

	    if( newfield[i][j] != field[i][j] ) then
		nchanges ++;
	    endif

        enddo
    enddo

    return nchanges;
end

procedure printfield( f : array [][] of Cell )
{
    var i, j : int;

    for i = 0 to last(f) {
        for j = 0 to last(f[i]) {
            if f[i][j] == 0 Cell then
                < "."
            elsif f[i][j] == 1 Cell then
                < "o"
            elsif f[i][j] == 2 Cell then
                < "*"
            else
                < "O"
            endif
        }
        . "";
    }
    . "";
}

procedure sleep( length : long )
{
    var i : long;
    for( i = 0L; i < length; i++ ) { }   
}

inline bytecode function readln( file inp ) : string
{
    BLDC 10 SFILEREADLN
}

function load_field( string filename ) : array [][] of Cell
{
    var input = fopen( filename, "r" );
    var line : string;
    var field, new_field : array [][] of Cell;

    var i : int = 0;

    while( (line=readln(input)) != null ) {
	new_field = new (array of Cell)[i+1];
	if field {
	    new_field := field;
	}
	field = new_field;
	field[i] = new Cell[length(line)-1];
	for var j = 0 to last(field[i]) {
	    if( line[j] != '.'c and line[j] != ' 'c ) {
		field[i][j] = 1 Cell;
	    }
	}
	i ++;
    }

    var max = 0;

    for i = 0 to last(field) {
	var len = length( field[i] );
	if max < len then max = len endif
    }

    for i = 0 to last(field) {
	var len = length( field[i] );
	if( len < max ) {
	    var new_line = new Cell[max];
	    new_line := field[i];
	    field[i] = new_line;
	}
    }

    fclose( input );
    return field;
}

function isdigit( c : char ) : bool
{
    return c == '0'c || c == '1'c || c == '2'c ||
           c == '3'c || c == '4'c || c == '5'c ||
           c == '6'c || c == '7'c || c == '8'c ||
           c == '9'c;
}

function isspace( c : char ) : bool
{
    return c == ' 'c || c == '\t'c;
}

inline bytecode function digit( c : char ) : int
{
    SLDC '0' BLDI SUB HEXTEND EXTEND
}

function atoi( s : string ) : int
{
    var val = 0;
    var pos : int = 0;
    var sign = 1;

    while( pos < length(s) && isspace(s[pos])) { pos ++ }

    if( pos < length(s) && s[pos] == '-'c ) {
        sign = -1;
        pos ++
    }

    if( pos < length(s) && s[pos] == '+'c ) {
        pos ++
    }

    for var i = pos to last(s) do
	if( !isdigit( s[i] )) { break };
	val = val * 10 + digit( s[i] );
    enddo

    return sign * val;
}

program life( string argv[] )
begin

if length( argv ) < 2 then

    . argv[0], ": please supply one file with Life " _
               "configuration as an argument"

else

var generations = 1000;

var field: array [][] of Cell;

if( length(argv) > 2 ) then
    generations = atoi( argv[1] );
    field = load_field( argv[2] );
else
    field = load_field( argv[1] );
endif

var width = length(field);
var height = length(field[0]);

var newfield = new Cell[width][height];

var states = 1 shl 18;
. states, states/4;

// var rules : array [][][] of byte = new byte[width][height][states/4];
var rules : array [][][] of byte = new (array of byte)[width][height];

// rules[0][0] = make_Life_rule( states );
rules[0][0] = make_random_rule( states );
for var i = 0 to last(rules) do
    for var j = 0 to last(rules[i]) do
        // rules[i][j] = rules[0][0];
        rules[i][j] = make_random_rule( states );
    enddo
enddo

// var newrules = new byte[width][height][states/4];
var newrules = clone( rules, 3 );

printfield( field );

var gen : int = 1;

< "\033[H\033[2J";
//< "\033[H";
//< "\033[2J";
< "\033[?25l";

var nchanges: int;

. "Generation:", generations;
printfield( field );

while( generations < 0 || gen <= generations ) {
    nchanges = generation( newfield, field, newrules, rules );
    field, newfield = newfield, field;
    rules, newrules = newrules, rules;
    < "\033[H";
    < "Generation:", gen, nchanges;
    . "              ";
    printfield( field );
    if( nchanges == 0 ) then
        . "Stable configuration reached.";
	break;
    endif
    // sleep( 800000 );
    gen ++;
}

< "\033[?25h";

endif

end (*program*);
