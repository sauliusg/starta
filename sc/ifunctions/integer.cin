/*--*- C -*------------------------------------------------------------------*\
**$Author$
**$Date$ 
**$Revision$
**$URL$
\*---------------------------------------------------------------------------*/

#include <pack.h>
#include <refsize.h>
/* #include <hashcell.h> */

#ifdef I
#undef I
#endif

#ifdef CVAL
#undef CVAL
#endif

#define I    num.@field@
#define CVAL @codeval@

/*
 LDCS (load constant)

 bytcode:
 LDCS address_of_int_value_in_string_representation

 stack:
 --> int_value

 A string representation of the integer constant is taken from the
 static data area at the offset given immediately after the opcode. It
 is converted into integer representation and the resulting
 'int_value', an integer, is loaded onto the stack.

 */

#if DO_NOT_USE_LDCS_OPTIMISATION

int @PREFIX1@LDCS( INSTRUCTION_FN_ARGS )
{
    ssize_t offset = istate.code[istate.ip+1].ssizeval;

    TRACE_FUNCTION();

    istate.ep --;
    istate.ep[0].I = strtol( istate.static_data + offset, NULL, 0 );

    return 2;
}

#else

int @PREFIX1@LDCS( INSTRUCTION_FN_ARGS )
{
    ssize_t offset = istate.code[istate.ip+1].ssizeval;

    TRACE_FUNCTION();

    istate.code[istate.ip].fn = @PREFIX1@LDC;

    istate.code[istate.ip+1].CVAL =
        strtol( istate.static_data + offset, NULL, 0 );

    return 0;
}

#endif

int @PREFIX1@MOD( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I %= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@OR( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I |= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@AND( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I &= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@XOR( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I ^= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@NOT( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[0].I = ~istate.ep[0].I;

    return 1;
}

int @PREFIX1@BOOLNOT( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[0].I = !istate.ep[0].I;

    return 1;
}

int @PREFIX1@SHL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I <<= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@SHR( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I >>= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

/*
 JZ (jump if zero)

 bytecode:
 JZ offset

 stack:
 tested_value --> 
 
 Perform jump if the (integer) value on the top of stack is zero;
 otherwise proceed to the next instruction.
 */

int @PREFIX1@JZ( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    if( (istate.ep++)->I == 0 ) {
	istate.ip += istate.code[istate.ip+1].ssizeval;
	return 0;
    } else {
	return 2;
    }
}

/*
 JNZ (jump if not zero)

 bytecode:
 JNZ offset

 stack:
 tested_value --> 
 
 Perform jump if the (integer) value on the top of stack is NOT zero;
 otherwise proceed to the next instruction.
 */

int @PREFIX1@JNZ( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    if( (istate.ep++)->I != 0 ) {
	istate.ip += istate.code[istate.ip+1].ssizeval;
	return 0;
    } else {
	return 2;
    }
}

/*
 * INDEX compute an address of the indexed location
 * 
 * bytecode:
 * INDEX
 * 
 * stack:
 * address, index -> indexed_address
 * 
 */

int @PREFIX1@INDEX( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    STACKCELL_OFFSET_PTR( istate.ep[1], istate.ep[0].I * sizeof(stackcell_t) );
    istate.ep ++;

    return 1;
}

/*
 * PCKIDX compute an address of the indexed element in a packed array
 * 
 * bytecode:
 * PCKIDX element_size
 * 
 * stack:
 * address, index -> indexed_address
 */

int @PREFIX1@PCKIDX( INSTRUCTION_FN_ARGS )
{
    ssize_t element_sz = istate.code[istate.ip+1].ssizeval;

    TRACE_FUNCTION();

    STACKCELL_OFFSET_PTR( istate.ep[1], istate.ep[0].I * element_sz );
    istate.ep ++;

    return 2;
}

/*
 LOOP (organise loop with a pre-computed number of cycles)

 bytecode:
 LOOP offset

 stack:
 counter_address, final_value --> counter_address, final_value 
 counter_address, final_value --> 
 
 Organise loop with a precomputed number of cycles. 

 The LOOP command first increments the value pointed to by counter_address
 and checks if the contents of the counter_address location is less or
 equal to the final_value. If yes (loop must be continued), it jumps to the
 specified offset, leaving its arguments on the stack. If the test
 condition is not true, LOOP removes its arguments from the stack and
 continues with the next instruction.

 */

int @PREFIX1@LOOP( INSTRUCTION_FN_ARGS )
{
    @type@ final_value = istate.ep[0].I;
    @type@ *counter_address = STACKCELL_PTR( istate.ep[1] );

    TRACE_FUNCTION();

    assert( counter_address != 0 );
    (*counter_address) ++;
    if( *counter_address <= final_value ) {
	istate.ip += istate.code[istate.ip+1].ssizeval;
	return 0;
    } else {
	istate.ep += 2;
	return 2;
    }
}

/*
 * BLOB (allocate array of bytes of a given length, initialised with zeros)
 *
 * bytecode:
 * BLOB
 *
 * stack:
 * length --> blob_ptr
 */

int @PREFIX1@BLOB( INSTRUCTION_FN_ARGS )
{
    void *ptr;
    ssize_t size = istate.ep[0].I;

    TRACE_FUNCTION();

    ptr = bcalloc_blob( size );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 1;
}

/*
 * AALLOC (allocate array of a given length, initialised with zeros)
 *
 * bytecode:
 * AALLOC size nref
 *
 * stack:
 * length --> array_ptr
 */

int @PREFIX1@AALLOC( INSTRUCTION_FN_ARGS )
{
    void *ptr;
    ssize_t elem_size = istate.code[istate.ip+1].ssizeval;
    ssize_t elem_nref = istate.code[istate.ip+2].ssizeval;
    ssize_t n_elem = istate.ep[0].I;

    TRACE_FUNCTION();

    ptr = bcalloc_array( elem_size, n_elem, elem_nref );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 3;
}

/*
 * MDALLOCC (allocate multidimesional array's dimension's layer)
 *
 * MDALLOCC elem_size nref level
 *
 * dstptr length -> dstptr 
 */

int @PREFIX1@MDALLOCC( INSTRUCTION_FN_ARGS )
{
    ssize_t element_size = istate.code[istate.ip+1].ssizeval;
    ssize_t nref = istate.code[istate.ip+2].ssizeval;
    int level = istate.code[istate.ip+3].ssizeval;
    int length = istate.ep[0].I;
    void *ptr;

    TRACE_FUNCTION();

    ptr = bcalloc_stackcell_layer( STACKCELL_PTR( istate.ep[1] ), length,
                                   nref, level );

    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[1], ptr );
    istate.ep ++;

    return 4;
}

/*
 * HASHALLOC (allocate hash table for a given number of keys,
 *            initialised with zeros)
 *
 * bytecode:
 * HASHALLOC element_size nref element_alignment
 *
 * stack:
 * ..., size -> ..., adressof
 */

#define ALIGN_NUMBER(N,lim)  ( (N) += ((lim) - ((int)(N)) % (lim)) % (lim) )

int @PREFIX1@HASHALLOC( INSTRUCTION_FN_ARGS )
{
    ssize_t element_size = istate.code[istate.ip+1].ssizeval;
    ssize_t nref = istate.code[istate.ip+2].ssizeval;
    ssize_t element_align = istate.code[istate.ip+3].ssizeval;
    ssize_t n_elem = istate.ep[0].I;
    void *ptr;
    ssize_t hash_key_ptr_size = REF_SIZE;
    ssize_t alloc_size;

    ALIGN_NUMBER( hash_key_ptr_size, element_align );

    alloc_size = element_size + hash_key_ptr_size;

    TRACE_FUNCTION();

    ptr = bcalloc_array( alloc_size, nref+hash_key_ptr_size/REF_SIZE, n_elem );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 4;
}

#include <alloccell.h>

int @PREFIX1@LENGTH( INSTRUCTION_FN_ARGS )
{
    alloccell_t *block = istate.ep[0].PTR;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );
    if( block ) {
	istate.ep[0].I = block[-1].length;
    } else {
	istate.ep[0].I = 0;
    }

    return 1;
}

/*
 * FILESCAN (read (scanf) integer value from the top of stack to a file)
 * 
 * bytecode:
 * FILESCAN
 * 
 * stack:
 * ..., file, value --> file
 * 
 * Read (scanf) an integer value from a file to the top of stack;
 * leave the file value on the top.
 */

int @PREFIX1@FILESCAN( INSTRUCTION_FN_ARGS )
{
    bytecode_file_hdr_t *file = STACKCELL_PTR( istate.ep[0] );
    FILE *fp = file ? file->fp : NULL;
    /* char *format = file ? file->string_scanf_format : NULL; */
    int value;

    TRACE_FUNCTION();

    if( !file ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              "attempt to scan an integer value from a file "
              "which was never opened",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_NULL_ERROR,
              EXCEPTION );
	return 0;
    }

    if( !fp ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              "attempt to scan an integer value from a closed file",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_NULL_ERROR,
              EXCEPTION );
	return 0;
    }

    fscanf( fp, "%d", &value );
    istate.ep --;
    istate.ep[0].I = value;

    return 1;
}

/*
 * FILEPRINT (print integer value from the top of stack to a file)
 * 
 * bytecode:
 * FILEPRINT
 * 
 * stack:
 * ..., file, integer --> file
 * 
 * Print an integer value to a file from the top of stack and remove
 * it; leave the file value on the top. The format for printing is
 * taken from the file structure.
 */

int @PREFIX1@FILEPRINT( INSTRUCTION_FN_ARGS )
{
    bytecode_file_hdr_t *file = STACKCELL_PTR( istate.ep[1] );
    FILE *fp = file->fp;
    char *format = file->int_format.ptr;

    TRACE_FUNCTION();

    if( !format ) {
	format = "%@printformat@";
    }

    fprintf( fp, format, istate.ep[0].I );
    istate.ep ++;

    return 1;
}

/*
 * NthBYTE Return the N-th byte of a number; the least significan byte
 * has index 0. Return 0 if the byte is not available.
 *
 * bytecode:
 * NthBYTE
 *
 * stack:
 * index --> signed_byte
 *
 */

int @PREFIX1@NthBYTE( INSTRUCTION_FN_ARGS )
{
    int index = istate.ep[0].num.i;
    @type@ value = istate.ep[1].I;

    TRACE_FUNCTION();

    istate.ep ++;

    istate.ep[0].num.b = (value >> (8*index)) & 0xFF;

    return 1;    
}

/*
 * SUBARRAY -- return an allocated sub-array 
 * 
 * bytecode:
 * SUBARRAY
 * 
 * stack:
 * ..., array, lower_bound, upper_bound --> subarray
 * 
 */

int @PREFIX1@SUBARRAY( INSTRUCTION_FN_ARGS )
{
    @type@ upper_bound = istate.ep[0].I;
    @type@ lower_bound = istate.ep[1].I;
    stackcell_t *array = STACKCELL_PTR( istate.ep[2] );
    alloccell_t *array_header;
    stackcell_t *subarray = NULL;
    ssize_t length, nref;
    @type@ original_upper_bound, original_lower_bound;

    TRACE_FUNCTION();

    if( array ) {
        array_header = ((alloccell_t*)array) - 1;
        length = array_header->length;
        original_upper_bound = upper_bound;
        original_lower_bound = lower_bound;
        if( upper_bound < 0 || lower_bound < 0 ) {
            if( upper_bound < 0 ) {
                upper_bound += length;
            }
            if( lower_bound < 0 ) {
                lower_bound += length;
            }
        }
        if( upper_bound < 0 || upper_bound >= length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -1,
                  /* message = */
                  (char*)cxprintf( "upper bound '%lld' is out of range "
                                   "0..%lld in subarray",
                                   (llong)original_upper_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }
        if( lower_bound < 0 || lower_bound >= length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -2,
                  /* message = */
                  (char*)cxprintf( "lower bound '%lld' is out of range "
                                   "0..%lld in subarray",
                                   (llong)original_lower_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }

        if( upper_bound < lower_bound ) {
            STACKCELL_ZERO_PTR( istate.ep[2] );
        } else {
            length = upper_bound - lower_bound + 1;
            nref = array_header->nref;

            subarray = bcalloc_array( sizeof(stackcell_t), 
                                      length, nref > 0 ? 1 : 0 );
            BC_CHECK_PTR( subarray );

            memcpy( subarray, &array[lower_bound], sizeof(array[0]) * length );

            STACKCELL_SET_ADDR( istate.ep[2], subarray );
        }
    }

    istate.ep += 2;

    return 1;
}

/*
 * SUBSTR -- return an allocated substring
 * 
 * bytecode:
 * SUBSTR element_size
 * 
 * stack:
 * ..., string, lower_bound, upper_bound --> substring
 * 
 */

int @PREFIX1@SUBSTR( INSTRUCTION_FN_ARGS )
{
    @type@ upper_bound = istate.ep[0].I;
    @type@ lower_bound = istate.ep[1].I;
    char *str = STACKCELL_PTR( istate.ep[2] );
    ssize_t element_sz = istate.code[istate.ip+1].ssizeval;
    alloccell_t *str_header;
    char *substr = NULL;
    ssize_t length;
    @type@ original_upper_bound, original_lower_bound;

    TRACE_FUNCTION();

    if( str ) {
        str_header = ((alloccell_t*)str) - 1;
        length = strnlen( str, str_header->length );
        original_upper_bound = upper_bound;
        original_lower_bound = lower_bound;
        if( upper_bound < 0 || lower_bound < 0 ) {
            if( upper_bound < 0 ) {
                upper_bound += length;
            }
            if( lower_bound < 0 ) {
                lower_bound += length;
            }
        }
        if( upper_bound < 0 || upper_bound > length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -1,
                  /* message = */
                  original_upper_bound >= 0 ?
                  (char*)cxprintf( "upper bound %lld "
                                   "is out of range 0..%lld in substring",
                                   (llong)upper_bound,
                                   (llong)(length-1)) :
                  (char*)cxprintf( "upper bound %lld (originally %lld) "
                                   "is out of range 0..%lld in substring",
                                   (llong)upper_bound,
                                   (llong)original_upper_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }
        if( lower_bound < 0 || lower_bound > length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -2,
                  /* message = */
                  original_lower_bound >= 0 ?
                  (char*)cxprintf( "lower bound %lld"
                                   " is out of range 0..%lld in substring",
                                   (llong)lower_bound,
                                   (llong)(length)) :
                  (char*)cxprintf( "lower bound %lld (originally %lld)"
                                   " is out of range 0..%lld in substring",
                                   (llong)lower_bound,
                                   (llong)original_lower_bound,
                                   (llong)(length)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }

        if( upper_bound < lower_bound - 1 ) {
            STACKCELL_ZERO_PTR( istate.ep[2] );
        } else {
            length = upper_bound - lower_bound + 1;

            substr = bcalloc_array( element_sz, length + 1, 0 );
            BC_CHECK_PTR( substr );

            strncpy( substr, &str[lower_bound], element_sz * length );
            substr[length] = '\0';

            STACKCELL_SET_ADDR( istate.ep[2], substr );
        }
    }

    istate.ep += 2;

    return 2;
}

/*
 * ATOI  Convert an ASCII string to number in the machine's representation
 *
 * bytecode:
 * ATOI
 *
 * stack:
 * ..., str -> ..., integer
 */

#define atob atoi
#define atos atoi

int ATO@PREFIX@( INSTRUCTION_FN_ARGS )
{
    char *str = STACKCELL_PTR( istate.ep[0] );

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );

    if( !str ) {
	istate.ep[0].I = 0;
    } else {
        istate.ep[0].I = ato@field@( str );
    }

    return 1;
}

#undef atob
#undef atos

/*
 * STRTOI Convert an ASCII string to number in the machine's
 *        representation, using the specified base.
 *
 * bytecode:
 * STRTOI
 *
 * stack:
 * ..., str, base -> ..., integer, ssize
 */

#define strtoi strtol
#define strtos strtol
#define strtob strtol

int STRTO@PREFIX@( INSTRUCTION_FN_ARGS )
{
    char *str = STACKCELL_PTR( istate.ep[1] );
    int base = istate.ep[0].num.i;
    char *endptr = NULL;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[1] );

    if( !str ) {
	istate.ep[1].I = 0;
        istate.ep[0].num.ssize = -1;
    } else {
        istate.ep[1].I = strto@field@( str, &endptr, base );
        istate.ep[0].num.ssize = endptr - str;
    }

    return 1;
}

#undef strtoi
#undef strtos
#undef strtob

/*---------------------------------------------------------------------------*/

static int
pack_@field@( stackcell_t *stackcell, char typechar, ssize_t size,
              ssize_t *offset, byte *blob )
{
    int i;
    @type@ value = stackcell->I;

    switch( typechar ) {
    case 'u':
    case 'i':
	for( i = 0; i < size; i++ ) {
	    *(blob + *offset + i) = value & 0xFF;
	    value >>= 8;
	}
	break;
    case 'U':
    case 'I':
	for( i = size - 1; i >= 0; i-- ) {
	    *(blob + *offset + i) = value & 0xFF;
	    value >>= 8;
	}
	break;
    default:
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              (char*)
              cxprintf( "unsupported pack type '%c' for type '@type@'",
                        typechar ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
        break;
    }

    *offset += size;

    return 1;
}

static int
unpack_@field@( stackcell_t *stack_cell, char typechar, ssize_t size,
                ssize_t *offset, byte *blob, cexception_t *ex )
{
    @type@ value;
    int i;
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    assert( blob_header->magic == BC_MAGIC );

    value = 0;

    if( blob_header->length < size + *offset ) {
	interpret_raise_exception_with_bcalloc_message
	    ( /* err_code = */ -1,
	      /* message = */
	      "attempting to unpack values past the end of a blob",
	      /* module_id = */ 0,
	      /* exception_id = */ SL_EXCEPTION_BLOB_OVERFLOW,
	      ex );
	return 0;
    }

    switch( typechar ) {
    case 'u':
        for( i = size - 1; i >= 0; i-- ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'U':
        for( i = 0; i < size; i++ ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'i':
	if( *(signed char*)(blob + *offset + size - 1) < 0 ) {
	    value = ~0;
	}
        for( i = size - 1; i >= 0; i-- ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'I':
	if( *(signed char*)(blob + *offset) < 0 ) {
	    value = ~0;
	}
        for( i = 0; i < size; i++ ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    default:
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              (char*)
              cxprintf( "unsupported unpack type '%c' for type '@type@'",
                        typechar ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              ex );
	return 0;
        break;
    }

    stack_cell->I = value;

    *offset += size;

    return 1;
}
