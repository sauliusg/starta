#
# Compiler tests
#
#
# Test interfaces
#

use * from std;

interface I1 {
    method mm() : int;
    method mn( int i ) : int;
}

interface I2: I1 {
    method nn();
}

interface I3: I1 {
    method nn(): string;
}

class A implements I2, I3 {
    int i;

    constructor A( int i = 100 ) { self.i = i }

    method mm@I1(): int {
        return self.i + 1
    }

    method mn@I1( int i ): int
    {
        return self.i + i
    }

    // method nn@I2() { . "A.i =", self.i, "at nn@I2()" }
    (*
    method nn@I3(): string {
        . "A.i**2 =", self.i*self.i, "at nn@I3()";
        return ">>> %d <<<" %% self.i*self.i;
    }
    *)
}

class A2 implements I2, I1 {
    int i;

    constructor A( int i = 100 ) { self.i = i }

    method mm@I1(): int {
        return self.i + 1
    }

    method mn@I1( int i ): int
    {
        return self.i + i
    }

    method nn@I2() { . "A.i =", self.i }
}

var a = new A(101);

. a->mn@I1( 193 );
a->nn@I2();
a->nn@I3();

var am = new A(10) * new [11];

. am[3]->mn@I1( 9 );
am[4]->nn@I2();
. am[5]->nn@I3();

// bytecode { PLD %a DUMPVMT }

procedure pI1( I1 i )
{
    < i->mm()
}

procedure pI2( i: I2 )
{
    < i->mm();
    . "";
    i->nn()
}

procedure pI3( i: I3 )
{
    < i->mm(), "(", i->nn() ,")"
}

pI1( a );
. "";
pI2( am[1] );
pI3( am[9] );
. "";
