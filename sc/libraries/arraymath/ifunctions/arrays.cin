/*--*- C -*------------------------------------------------------------------*\
**$Author$
**$Date$ 
**$Revision$
**$URL$
\*---------------------------------------------------------------------------*/

#include <arrays.h>
#include <string.h>
#include <assert.h>
#include <refsize.h>

#ifdef I
#undef I
#endif

#define I @field@

// FIXME: the 'FSUM' opcode is obsolete, superseeded by the '*SUMF'
// opcodes. S.G. 2016-09-05

/*
 * FSUM   Sum all values in an array
 * 
 * bytecode:
 * FSUM
 * 
 * stack:
 * array of float -> float
 * 
 */

int @PREFIX@SUM( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @element_type@ *array = STACKCELL_PTR( istate.ep[0] );
    alloccell_t *hdr = (alloccell_t*)array;
    double sum = 0.0;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        for( i = 0; i < length; i++ ) {
            sum += ARRAY_ELEMENT(array[i]);
        }
    }
    STACKCELL_ZERO_PTR( istate.ep[0] );
    istate.ep[0].num.I = sum;

    return 1;
}

/*
 * AMINMAX   Find a minimum and a maximum value in an array and their indexes
 *
 * bytecode:
 * AMINMAX
 *
 * stack:
 * array -> min_value max_value min_value_index max_value_index
 *
 * If there are several minimal or maximal values in the array,
 * min_value_index and max_value_index are *minimal* indexes for thse
 * values.
 */

int @PREFIX1@AMINMAX( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @element_type@ *array = STACKCELL_PTR( istate.ep[0] );
    alloccell_t *hdr = (alloccell_t*)array;
    @type@ min, max;
    ssize_t imin, imax;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        if( length > 0 ) {
            min = max = ARRAY_ELEMENT(array[0]);
            imin = imax = 0;
            for( i = 1; i < length; i++ ) {
                if( min > ARRAY_ELEMENT(array[i]) ) {
                    min = ARRAY_ELEMENT(array[i]);
                    imin = i;
                }
                if( max < ARRAY_ELEMENT(array[i]) ) {
                    max = ARRAY_ELEMENT(array[i]);
                    imax = i;
                }
            }
        } else {
            min = max = 0;
            imin = imax = -1;
        }
    }

    STACKCELL_ZERO_PTR( istate.ep[0] );

    istate.ep -= 3;

    istate.ep[0].num.i = imax;
    istate.ep[1].num.i = imin;
    istate.ep[2].num.I = max;
    istate.ep[3].num.I = min;

    return 1;
}

/*
 * AMEANVAR   Calculate mean and variance of an array
 *
 * bytecode:
 * AMEANVAR
 *
 * stack:
 * array, correction -> mean, variance
 *
 */

int @PREFIX1@AMEANVAR( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @element_type@ *array = STACKCELL_PTR( istate.ep[1] );
    int correction = STACKCELL_INT( istate.ep[0] );
    alloccell_t *hdr = (alloccell_t*)array;
    float mean, sum, variance;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        if( length > 0 ) {
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                sum += ARRAY_ELEMENT(array[i]);
            }
            mean = sum/length;
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                float diff = mean - ARRAY_ELEMENT(array[i]);
                sum += diff * diff;
            }
            variance = sum/(length - correction);
        } else {
            mean = 0;
            variance = -1.0;
        }
    }

    STACKCELL_ZERO_PTR( istate.ep[1] );

    istate.ep[1].num.f = mean;
    istate.ep[0].num.f = variance;

    return 1;
}

/* Same as 'AMEANVAR' but with the 'double' sum: */

int @PREFIX1@AMEANVARD( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @element_type@ *array = STACKCELL_PTR( istate.ep[1] );
    int correction = STACKCELL_INT( istate.ep[0] );
    alloccell_t *hdr = (alloccell_t*)array;
    double mean, sum, variance;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        if( length > 0 ) {
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                sum += ARRAY_ELEMENT(array[i]);
            }
            mean = sum/length;
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                float diff = mean - ARRAY_ELEMENT(array[i]);
                sum += diff * diff;
            }
            variance = sum/(length - correction);
        } else {
            mean = 0;
            variance = -1.0;
        }
    }

    STACKCELL_ZERO_PTR( istate.ep[1] );

    istate.ep[1].num.d = mean;
    istate.ep[0].num.d = variance;

    return 1;
}

/* Same as 'AMEANVAR' but with the 'ldouble' sum: */

int @PREFIX1@AMEANVARLD( INSTRUCTION_FN_ARGS )
{
    ssize_t i, length;
    @element_type@ *array = STACKCELL_PTR( istate.ep[1] );
    int correction = STACKCELL_INT( istate.ep[0] );
    alloccell_t *hdr = (alloccell_t*)array;
    ldouble mean, sum, variance;

    TRACE_FUNCTION();

    if( array ) {
        length = hdr[-1].length;
        if( length > 0 ) {
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                sum += ARRAY_ELEMENT(array[i]);
            }
            mean = sum/length;
            sum = 0.0;
            for( i = 0; i < length; i++ ) {
                float diff = mean - ARRAY_ELEMENT(array[i]);
                sum += diff * diff;
            }
            variance = sum/(length - correction);
        } else {
            mean = 0;
            variance = -1.0;
        }
    }

    STACKCELL_ZERO_PTR( istate.ep[1] );

    istate.ep[1].num.ld = mean;
    istate.ep[0].num.ld = variance;

    return 1;
}

/*
 * ACOPY   Copy values of one array into another 
 * 
 * bytecode:
 * ACOPY
 * 
 * stack:
 * ..., array1, array2, start1, start2, length -> ...
 *           4       3        2       1      0
 *         dst     src
 */

int @PREFIX1@ACOPY( INSTRUCTION_FN_ARGS )
{
    ssize_t i;
    ssize_t length = STACKCELL_INT( istate.ep[0] );
    ssize_t start2 = STACKCELL_INT( istate.ep[1] );
    ssize_t start1 = STACKCELL_INT( istate.ep[2] );
    @element_type@ *array2 = STACKCELL_PTR( istate.ep[3] );
    @element_type@ *array1 = STACKCELL_PTR( istate.ep[4] );
    alloccell_t *hdr1 = (alloccell_t*)array1;
    alloccell_t *hdr2 = (alloccell_t*)array2;

    TRACE_FUNCTION();

    if( array1 && array2 ) {
        ssize_t alength1 = hdr1[-1].length;
        ssize_t alength2 = hdr2[-1].length;
#ifdef packed_type
        const ssize_t esize1 = hdr1[-1].element_size;
        const ssize_t esize2 = hdr2[-1].element_size;
#elif full_stackcell
        const ssize_t esize1 = sizeof(stackcell_t);
        const ssize_t esize2 = sizeof(stackcell_t);
#elif split_stackcell
        const ssize_t esize1 = alloccell_has_references(hdr1[-1]) ?
            REF_SIZE : sizeof(stackunion_t);
        const ssize_t esize2 = alloccell_has_references(hdr1[-2]) ?
            REF_SIZE : sizeof(stackunion_t);
#else
#error Unknown bytecode implementation
#endif

        /* The compile-time type control of Starta must ensure that
           element sizes are the same in both arrays: */
        assert( esize1 == esize2 );

        /* Set up the defaults: */
        if( start1 < 0 ) start1 = 0;
        if( start2 < 0 ) start2 = 0;

        if( length < 0 || length > alength1 - start1 )
            length = alength1 - start1;

        if( length > alength2 - start2 )
            length = alength2 - start2;

        char *dst = (char*)array1;
        char *src = (char*)array2;

        memcpy( dst + start1*esize1, src + start2*esize1, length*esize1 );

    }

    STACKCELL_ZERO_PTR( istate.ep[3] );
    istate.ep += 4;

    return 1;
}

/* Same as ACOPY, with 'long' offsets: */

int @PREFIX1@ACOPYL( INSTRUCTION_FN_ARGS )
{
    ssize_t i;
    ssize_t length = STACKCELL_LONG( istate.ep[0] );
    ssize_t start2 = STACKCELL_LONG( istate.ep[1] );
    ssize_t start1 = STACKCELL_LONG( istate.ep[2] );
    @element_type@ *array2 = STACKCELL_PTR( istate.ep[3] );
    @element_type@ *array1 = STACKCELL_PTR( istate.ep[4] );
    alloccell_t *hdr1 = (alloccell_t*)array1;
    alloccell_t *hdr2 = (alloccell_t*)array2;

    TRACE_FUNCTION();

    if( array1 && array2 ) {
        ssize_t alength1 = hdr1[-1].length;
        ssize_t alength2 = hdr2[-1].length;
#ifdef packed_type
        const ssize_t esize1 = hdr1[-1].element_size;
        const ssize_t esize2 = hdr2[-1].element_size;
#elif full_stackcell
        const ssize_t esize1 = sizeof(stackcell_t);
        const ssize_t esize2 = sizeof(stackcell_t);
#elif split_stackcell
        const ssize_t esize1 = alloccell_has_references(hdr1[-1]) ?
            REF_SIZE : sizeof(stackunion_t);
        const ssize_t esize2 = alloccell_has_references(hdr1[-2]) ?
            REF_SIZE : sizeof(stackunion_t);
#else
#error Unknown bytecode implementation
#endif

        /* The compile-time type control of Starta mus ensure that
           element sizes are the same in both arrays: */
        assert( esize1 == esize2 );

        /* Set up the defaults: */
        if( start1 < 0 ) start1 = 0;
        if( start2 < 0 ) start2 = 0;

        if( length < 0 || length > alength1 - start1 )
            length = alength1 - start1;

        if( length > alength2 - start2 )
            length = alength2 - start2;

        char *dst = (char*)array1;
        char *src = (char*)array2;

        memcpy( dst + start1*esize1, src + start2*esize1, length*esize1 );

    }

    STACKCELL_ZERO_PTR( istate.ep[3] );
    istate.ep += 4;

    return 1;
}

/* Same as ACOPY, with 'llong' offsets: */

int @PREFIX1@ACOPYLL( INSTRUCTION_FN_ARGS )
{
    ssize_t i;
    ssize_t length = STACKCELL_LLONG( istate.ep[0] );
    ssize_t start2 = STACKCELL_LLONG( istate.ep[1] );
    ssize_t start1 = STACKCELL_LLONG( istate.ep[2] );
    @element_type@ *array2 = STACKCELL_PTR( istate.ep[3] );
    @element_type@ *array1 = STACKCELL_PTR( istate.ep[4] );
    alloccell_t *hdr1 = (alloccell_t*)array1;
    alloccell_t *hdr2 = (alloccell_t*)array2;

    TRACE_FUNCTION();

    if( array1 && array2 ) {
        ssize_t alength1 = hdr1[-1].length;
        ssize_t alength2 = hdr2[-1].length;
#ifdef packed_type
        const ssize_t esize1 = hdr1[-1].element_size;
        const ssize_t esize2 = hdr2[-1].element_size;
#elif full_stackcell
        const ssize_t esize1 = sizeof(stackcell_t);
        const ssize_t esize2 = sizeof(stackcell_t);
#elif split_stackcell
        const ssize_t esize1 = alloccell_has_references(hdr1[-1]) ?
            REF_SIZE : sizeof(stackunion_t);
        const ssize_t esize2 = alloccell_has_references(hdr1[-2]) ?
            REF_SIZE : sizeof(stackunion_t);
#else
#error Unknown bytecode implementation
#endif

        /* The compile-time type control of Starta mus ensure that
           element sizes are the same in both arrays: */
        assert( esize1 == esize2 );

        /* Set up the defaults: */
        if( start1 < 0 ) start1 = 0;
        if( start2 < 0 ) start2 = 0;

        if( length < 0 || length > alength1 - start1 )
            length = alength1 - start1;

        if( length > alength2 - start2 )
            length = alength2 - start2;

        char *dst = (char*)array1;
        char *src = (char*)array2;

        memcpy( dst + start1*esize1, src + start2*esize1, length*esize1 );

    }

    STACKCELL_ZERO_PTR( istate.ep[3] );
    istate.ep += 4;

    return 1;
}
