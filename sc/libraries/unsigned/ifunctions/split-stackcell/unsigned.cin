/*--*- C -*------------------------------------------------------------------*\
**$Author$
**$Date$ 
**$Revision$
**$URL$
\*---------------------------------------------------------------------------*/

#include <pack.h>
#include <refsize.h>
#include <alloccell.h>
#include <assert.h>
/* #include <hashcell.h> */

#ifdef I
#undef I
#endif

#ifdef CVAL
#undef CVAL
#endif

#define I    num.@field@
#define CVAL @codeval@

/* ADD* and SUB* operations are the same for unsigned values as they
   are for signed values in the 2-complement arithmetic. */

int @PREFIX1@SHL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I <<= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@SHR( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I >>= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@MUL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I *= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@DIV( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I /= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@LT( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I < istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@LE( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I <= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@GT( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I > istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@GE( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I >= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@EQ( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I == istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@NE( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I = istate.ep[1].I != istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@LTBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I < istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@LEBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I <= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@GTBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I > istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@GEBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I >= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@EQBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I == istate.ep[0].I;
    istate.ep ++;

    return 1;
}

int @PREFIX1@NEBOOL( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].num.b = istate.ep[1].I != istate.ep[0].I;
    istate.ep ++;

    return 1;
}

/*
 LDC (load constant)

 bytcode:
 LDC int_value

 stack:
 --> int_value

 'int_value', an integer constant, is taken from the bytecode and loaded
 onto the stack.

 */

int @PREFIX1@LDC( INSTRUCTION_FN_ARGS )
{
    @type@ value = @cval_star@istate.code[istate.ip+1].CVAL;

    TRACE_FUNCTION();

    istate.ep --;
    istate.ep[0].I = value;

    return 2;
}

/*
 * PRINT (print integer value from the top of stack)
 * 
 * bytecode:
 * PRINT
 * 
 * stack:
 * value -->
 * 
 * Print an integer value from the top of stack and remove it.
 */

int @PREFIX@PRINT( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    printf( "%@printformat@", istate.ep[0].I );
    istate.ep ++;

    return 1;
}

/*
 * SPRINTF (String Print Formatted)
 * 
 * bytecode:
 * SPRINTF
 * 
 * stack:
 * format, value --> string
 * 
 * Print a value from the top of stack into a string, and leave that
 * string on the top of the stack
 */

int @PREFIX@SPRINTF( INSTRUCTION_FN_ARGS )
{
    void *ptr;
    char *format;
    char buffer[100]; /* should be large enough for any reasonable
			 numeric value */

    TRACE_FUNCTION();

    format = STACKCELL_PTR(istate.ep[1]);

    snprintf( buffer, sizeof(buffer), format, istate.ep[0].I );

    ptr = bcalloc_blob( strlen(buffer)+1, EXCEPTION );

    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[1], ptr );

    strcpy( STACKCELL_PTR(istate.ep[1]), buffer );

    istate.ep ++;

    return 1;
}

/*---------------------------------------------------------------------------*/

static int
pack_@field@( void *value_ptr, char typechar, ssize_t size,
              ssize_t *offset, byte *blob )
{
    int i;
    @type@ value = ((stackunion_t*)value_ptr)->@field@;

    switch( typechar ) {
    case 'u':
    case 'i':
	for( i = 0; i < size; i++ ) {
	    *(blob + *offset + i) = value & 0xFF;
	    value >>= 8;
	}
	break;
    case 'U':
    case 'I':
	for( i = size - 1; i >= 0; i-- ) {
	    *(blob + *offset + i) = value & 0xFF;
	    value >>= 8;
	}
	break;
    default:
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              (char*)
              cxprintf( "unsupported pack type '%c' for type '@type@'",
                        typechar ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
        break;
    }

    *offset += size;

    return 1;
}

static int
unpack_@field@( void *value_ptr, char typechar, ssize_t size,
                ssize_t *offset, byte *blob, cexception_t *ex )
{
    @type@ value;
    int i;
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    assert( blob_header->magic == BC_MAGIC );

    value = 0;

    if( blob_header->size < size + *offset ) {
	interpret_raise_exception_with_bcalloc_message
	    ( /* err_code = */ -1,
	      /* message = */
	      "attempting to unpack values past the end of a blob",
	      /* module_id = */ 0,
	      /* exception_id = */ SL_EXCEPTION_BLOB_OVERFLOW,
	      ex );
	return 0;
    }

    switch( typechar ) {
    case 'u':
        for( i = size - 1; i >= 0; i-- ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'U':
        for( i = 0; i < size; i++ ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'i':
	if( *(signed char*)(blob + *offset + size - 1) < 0 ) {
	    value = ~0;
	}
        for( i = size - 1; i >= 0; i-- ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    case 'I':
	if( *(signed char*)(blob + *offset) < 0 ) {
	    value = ~0;
	}
        for( i = 0; i < size; i++ ) {
            value <<= 8;
            value |= *(blob + *offset + i);
        }
        break;
    default:
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              (char*)
              cxprintf( "unsupported unpack type '%c' for type '@type@'",
                        typechar ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              ex );
	return 0;
        break;
    }

    ((stackunion_t*)value_ptr)->@field@ = value;

    *offset += size;

    return 1;
}

/*
 * PACK (pack a value into a blob (an unstructured array of bytes))
 * 
 * bytecode:
 * PACK
 * 
 * stack:
 * ..., blob, offset, description, value --> ...
 * 
 */

int @PREFIX1@PACK( INSTRUCTION_FN_ARGS )
{
    char *description = STACKCELL_PTR( istate.ep[1] );
    ssize_t offset = istate.ep[2].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[3] );
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;
    char typechar;
    ssize_t size;

    TRACE_FUNCTION();

    assert( blob_header->magic == BC_MAGIC );

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */ "pack description not specified",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
    }

    typechar = description[0];

    if( description[0] != '\0' ) {
        size = atol( description + 1 );
    } else {
        size = 0;
    }

    if( pack_value( &istate.ep[0].num, typechar, size, &offset, 
                    blob, pack_@field@, EXCEPTION ) == 0 ) {
	return 0;
    }

    istate.ep += 4;
    return 1;
}

/*
 * PACKARRAY (pack an array into a blob (an unstructured array of bytes))
 * 
 * bytecode:
 * PACKARRAY
 * 
 * stack:
 * ..., blob, offset, description, value --> ...
 * 
 */

int @PREFIX1@PACKARRAY( INSTRUCTION_FN_ARGS )
{
    void **array = STACKCELL_PTR( istate.ep[0] );
    char *description = STACKCELL_PTR( istate.ep[1] );
    ssize_t offset = istate.ep[2].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[3] );
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    TRACE_FUNCTION();

    assert( blob_header->magic == BC_MAGIC );

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */ "pack description not specified",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
    }

    if( !pack_array_values( blob, array, description,
                            &offset, pack_@field@, EXCEPTION )) {
	return 0;
    }

    STACKCELL_ZERO_PTR( istate.ep[0] ); /* zero array reference */
    STACKCELL_ZERO_PTR( istate.ep[1] ); /* zero description string reference */
    STACKCELL_ZERO_PTR( istate.ep[3] ); /* zero blob reference */
    istate.ep += 4;
    return 1;
}

/*
 * PACKMDARRAY (pack a multidimentional array into a blob)
 * 
 * bytecode:
 * PACKMDARRAY level
 * 
 * stack:
 * ..., blob, offset, description, md_array_value --> ...
 * 
 */

int @PREFIX1@PACKMDARRAY( INSTRUCTION_FN_ARGS )
{
    int level = istate.code[istate.ip+1].ssizeval - 1;

    void **array = STACKCELL_PTR( istate.ep[0] );
    char *description = STACKCELL_PTR( istate.ep[1] );
    ssize_t offset = istate.ep[2].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[3] );
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    TRACE_FUNCTION();

    if( !blob ) {
	STACKCELL_ZERO_PTR( istate.ep[0] ); /* zero array reference */
	STACKCELL_ZERO_PTR( istate.ep[1] ); /* zero descrition string ref. */
	STACKCELL_ZERO_PTR( istate.ep[3] ); /* zero blob reference */
	istate.ep += 4;
	return 2;
    }

    assert( blob_header->magic == BC_MAGIC );

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */ "pack description not specified",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
    }

    if( !pack_array_layer( blob, array, description,
                           &offset, level, pack_@field@, EXCEPTION )) {
	return 0;
    }

    STACKCELL_ZERO_PTR( istate.ep[0] ); /* zero array reference */
    STACKCELL_ZERO_PTR( istate.ep[1] ); /* zero description string reference */
    STACKCELL_ZERO_PTR( istate.ep[3] ); /* zero blob reference */
    istate.ep += 4;
    return 2;
}

/*
 * UNPACK (unpack a value from a blob )
 * 
 * bytecode:
 * UNPACK
 * 
 * stack:
 * blob, offset, description --> value
 * 
 */

int @PREFIX1@UNPACK( INSTRUCTION_FN_ARGS )
{
    char *description = STACKCELL_PTR( istate.ep[0] );
    ssize_t size;
    char typechar;
    ssize_t offset = istate.ep[1].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[2] );
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    TRACE_FUNCTION();

    assert( blob_header->magic == BC_MAGIC );

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */ "unpack description not specified",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
              EXCEPTION );        
	return 0;
    }

    typechar = description[0];

    if( description[0] != '\0' ) {
        size = atol( description + 1 );
    } else {
        size = 0;
    }

    if( unpack_value( &istate.ep[2], typechar, size, &offset, blob,
                      unpack_@field@, EXCEPTION ) == 0 ) {
	return 0;
    }

    STACKCELL_ZERO_PTR( istate.ep[0] );

    istate.ep += 2;

    return 1;
}

/*
 * UNPACKARRAY (unpack an array of values from a blob )
 * 
 * bytecode:
 * UNPACKARRAY
 * 
 * stack:
 * blob, offset, description --> array_value
 * 
 */

int @PREFIX1@UNPACKARRAY( INSTRUCTION_FN_ARGS )
{
    char *description = STACKCELL_PTR( istate.ep[0] );
    ssize_t offset = istate.ep[1].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[2] );
    alloccell_t *blob_header = ((alloccell_t*)blob) - 1;

    TRACE_FUNCTION();

    assert( blob_header->magic == BC_MAGIC );

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
	    ( /* err_code = */ -1,
	      /* message = */ "unpack description not specified",
	      /* module_id = */ 0,
	      /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
	      EXCEPTION );
        return 0;
    }

    if( !unpack_array_values( blob, &istate.ep[2].PTR, /* element_nref = */ 0,
                              description, &offset, unpack_@field@,
                              EXCEPTION )) {
        return 0;
    }

    STACKCELL_ZERO_PTR( istate.ep[0] );

    istate.ep += 2;

    return 1;
}

/*
 * UNPACKMDARRAY (unpack an array of values from a blob )
 * 
 * bytecode:
 * UNPACKMDARRAY level
 * 
 * stack:
 * dstptr, blob, offset, description --> dstptr
 * 
 */

int @PREFIX1@UNPACKMDARRAY( INSTRUCTION_FN_ARGS )
{
    int level = istate.code[istate.ip+1].ssizeval;

    char *description = STACKCELL_PTR( istate.ep[0] );
    ssize_t offset = istate.ep[1].num.ssize;
    byte *blob = STACKCELL_PTR( istate.ep[2] );
    stackcell_t *array = &istate.ep[3];

    TRACE_FUNCTION();

    if( !description ) {
	interpret_raise_exception_with_bcalloc_message
	    ( /* err_code = */ -1,
	      /* message = */ "unpack description not specified",
	      /* module_id = */ 0,
	      /* exception_id = */ SL_EXCEPTION_BLOB_BAD_DESCR,
	      EXCEPTION );        
    }

    if( !unpack_array_layer( blob, &array->ptr, /* element_nref = */ 0,
                             description, &offset, level, unpack_@field@,
                             EXCEPTION )) {
        return 0;
    }

    STACKCELL_ZERO_PTR( istate.ep[0] );

    istate.ep += 3;

    return 2;
}

/*
 LDCS (load constant)

 bytcode:
 LDCS address_of_int_value_in_string_representation

 stack:
 --> int_value

 A string representation of the integer constant is taken from the
 static data area at the offset given immediately after the opcode. It
 is converted into integer representation and the resulting
 'int_value', an integer, is loaded onto the stack.

 */

#if DO_NOT_USE_LDCS_OPTIMISATION

int @PREFIX1@LDCS( INSTRUCTION_FN_ARGS )
{
    ssize_t offset = istate.code[istate.ip+1].ssizeval;

    TRACE_FUNCTION();

    istate.ep --;
    istate.ep[0].I = strtoll( istate.static_data + offset, NULL, 0 );

    return 2;
}

#else

int @PREFIX1@LDCS( INSTRUCTION_FN_ARGS )
{
    ssize_t offset = istate.code[istate.ip+1].ssizeval;
    ullong value;

    TRACE_FUNCTION();

    /* convert and check the value for errors: */
    errno = 0;
    value = strtoull( istate.static_data + offset, NULL, 0 );
    if( errno || value > @type_max@ ) {
        char *errmsg = errno ? strerror(errno) : "unsigned constant too large";
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -3,
              /* message = */ (char*)cxprintf
              ( "%s - '%s' %c%s", __FUNCTION__,
                istate.static_data + offset, tolower(errmsg[0]),
                errmsg[0] ? errmsg+1 : "" ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_TRUNCATED_INTEGER,
              EXCEPTION );
        return 0;
    }

#if 2@cval_star@3 == 6

    istate.code[istate.ip+1].CVAL = interpret_alloc( &istate, sizeof( @type@ ));
    if( istate.code[istate.ip+1].CVAL ) {
        istate.code[istate.ip].fn = @PREFIX@LDC;
        @cval_star@istate.code[istate.ip+1].CVAL = value;
        return 0;
    } else {
        /* If allocation failed, use a fallback to the old
           behaviour: */
        istate.ep --;
        istate.ep[0].I = value;
        return 2;
    }
    
#else
    istate.code[istate.ip].fn = @PREFIX1@LDC;
    istate.code[istate.ip+1].CVAL = value;
    return 0;
#endif
}

#endif

int @PREFIX1@MOD( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[1].I %= istate.ep[0].I;
    istate.ep ++;

    return 1;
}

/*
 * INDEX compute an address of the indexed location
 * 
 * bytecode:
 * INDEX
 * 
 * stack:
 * address, index -> indexed_address
 * 
 */

int @PREFIX1@INDEX( INSTRUCTION_FN_ARGS )
{
    @type@ index = istate.ep[0].I;
    alloccell_t *array_ptr = istate.ep[1].PTR;
    ssize_t length = array_ptr ? array_ptr[-1].length : 0;

    TRACE_FUNCTION();

    if( !array_ptr ) {
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -3,
              /* message = */ "can't index null array",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_NULL_ERROR,
              EXCEPTION );
	return 0;
    }

    if( index < 0 ) {
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -4,
              /* message = */ "negative array index",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_ARRAY_INDEX_NEGATIVE,
              EXCEPTION );
	return 0;
    }

    if( index >= length ) {
        interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -5,
              /* message = */ 
              (char*)cxprintf( "array index %d out of bounds", index ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_ARRAY_INDEX_OVERFLOW,
              EXCEPTION );
	return 0;
    }

    STACKCELL_OFFSET_PTR( istate.ep[1], istate.ep[0].I * sizeof(stackcell_t) );
    istate.ep ++;

    return 1;
}

/*
 * PCKIDX compute an address of the indexed element in a packed array
 * 
 * bytecode:
 * PCKIDX element_size
 * 
 * stack:
 * address, index -> indexed_address
 */

int @PREFIX1@PCKIDX( INSTRUCTION_FN_ARGS )
{
    ssize_t element_sz = istate.code[istate.ip+1].ssizeval;

    TRACE_FUNCTION();

    STACKCELL_OFFSET_PTR( istate.ep[1], istate.ep[0].I * element_sz );
    istate.ep ++;

    return 2;
}

/*
 LOOP (organise loop with a pre-computed number of cycles)

 bytecode:
 LOOP offset

 stack:
 counter_address, final_value --> counter_address, final_value 
 counter_address, final_value --> 
 
 Organise loop with a precomputed number of cycles. 

 The LOOP command first increments the value pointed to by counter_address
 and checks if the contents of the counter_address location is less or
 equal to the final_value. If yes (loop must be continued), it jumps to the
 specified offset, leaving its arguments on the stack. If the test
 condition is not true, LOOP removes its arguments from the stack and
 continues with the next instruction.

 */

int @PREFIX1@LOOP( INSTRUCTION_FN_ARGS )
{
    @type@ final_value = istate.ep[0].I;
    @type@ *counter_address = STACKCELL_PTR( istate.ep[1] );

    TRACE_FUNCTION();

    assert( counter_address != 0 );
    (*counter_address) ++;
    if( *counter_address <= final_value ) {
	istate.ip += istate.code[istate.ip+1].ssizeval;
	return 0;
    } else {
	istate.ep += 2;
	return 2;
    }
}

/*
 * BLOB (allocate array of bytes of a given length, initialised with zeros)
 *
 * bytecode:
 * BLOB
 *
 * stack:
 * length --> blob_ptr
 */

int @PREFIX1@BLOB( INSTRUCTION_FN_ARGS )
{
    void *ptr;
    ssize_t size = istate.ep[0].I;

    TRACE_FUNCTION();

    ptr = bcalloc_blob( size, EXCEPTION );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 1;
}

/*
 * AALLOC (allocate array of a given length, initialised with zeros)
 *
 * bytecode:
 * AALLOC nref
 *
 * stack:
 * length --> array_ptr
 */

int @PREFIX1@AALLOC( INSTRUCTION_FN_ARGS )
{
    void *ptr;
    ssize_t elem_nref = istate.code[istate.ip+1].ssizeval;
    ssize_t n_elem = istate.ep[0].I;

    TRACE_FUNCTION();

    ptr = bcalloc_array( elem_nref == 0 ? sizeof(stackunion_t) : REF_SIZE,
                         n_elem, elem_nref, EXCEPTION );
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 2;
}

/*
 * MDALLOCC (allocate multidimesional array's dimension's layer)
 *
 * MDALLOCC nref level
 *
 * dstptr length -> dstptr 
 */

int @PREFIX1@MDALLOCC( INSTRUCTION_FN_ARGS )
{
    ssize_t nref = istate.code[istate.ip+1].ssizeval;
    int level = istate.code[istate.ip+2].ssizeval;
    int length = istate.ep[0].I;
    void *ptr;

    TRACE_FUNCTION();

    ptr = bcalloc_layer( STACKCELL_PTR( istate.ep[1] ), length,
                         nref, level, EXCEPTION );

    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[1], ptr );
    istate.ep ++;

    return 3;
}

/*
 * HASHALLOC (allocate hash table for a given number of keys,
 *            initialised with zeros)
 *
 * bytecode:
 * HASHALLOC nref
 *
 * stack:
 * ..., size -> ..., adressof
 */

int @PREFIX1@HASHALLOC( INSTRUCTION_FN_ARGS )
{
    ssize_t n_elem = istate.ep[0].I;
    ssize_t nref = istate.code[istate.ip+1].ssizeval;
    void *ptr;

    TRACE_FUNCTION();

    assert( nref == 0 || nref == 1 );

    if( nref == 0 ) {
        /* Hash elements are numbers: we allocate a REF (for a key)
           and a stackunion_t structure (for an associated value) for
           each hash entry. In this case, references are allocated
           with negative offsets, and numbers -- with positive
           offsets: */
        ptr = bcalloc( /* size = */ n_elem * (sizeof(stackunion_t) + REF_SIZE),
                       /* length = */ n_elem, /* nref = */ -n_elem,
                       EXCEPTION );
    } else {
        /* Hash elements are references: in this case, we allocate
           twice as many references as is needed for hash length (for
           each element, one references is for a key, and another --
           for an associated value). Both keys and values are
           allcoated in the positive directions: */
        ptr = bcalloc( /* size = */ n_elem * 2 * REF_SIZE,
                       /* length = */ n_elem, /* nref = */ 2 * n_elem,
                       EXCEPTION );
    }
    BC_CHECK_PTR( ptr );
    STACKCELL_SET_ADDR( istate.ep[0], ptr );

    return 2;
}

#include <alloccell.h>

/*
 * LENGTH -- return the length of an array.
 *
 * bytecode:
 * LENGTH
 * 
 * stack:
 * ..., array --> array_length
 * 
 */

int @PREFIX1@LENGTH( INSTRUCTION_FN_ARGS )
{
    alloccell_t *block = istate.ep[0].PTR;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );
    if( block ) {
	istate.ep[0].I = block[-1].length;
    } else {
	istate.ep[0].I = 0;
    }

    return 1;
}

/*
 * NREF -- return the reference count of an array.
 *
 * bytecode:
 * NREF
 * 
 * stack:
 * ..., array --> array_length
 * 
 */

int @PREFIX1@NREF( INSTRUCTION_FN_ARGS )
{
    alloccell_t *block = istate.ep[0].PTR;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );
    if( block ) {
	istate.ep[0].I = block[-1].nref;
    } else {
	istate.ep[0].I = 0;
    }

    return 1;
}

/*
 * CAPACITY -- return the allocated memory capacity of an
 *             array. Capacity is equal to the number of elements that
 *             can be stored in this allocated array; the actual
 *             number of stored elements may be smaller than this:
 *             length <= capacity.
 *
 * bytecode:
 * CAPACITY
 * 
 * stack:
 * ..., array --> array_capacity
 * 
 */

int @PREFIX1@CAPACITY( INSTRUCTION_FN_ARGS )
{
    alloccell_t *block = istate.ep[0].PTR;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );
    if( block ) {
        ssize_t size, element_size;
        size = block[-1].size;
        element_size = alloccell_has_references( block[-1] ) ?
            REF_SIZE : sizeof(stackunion_t);
        if( element_size > 0 ) {
            istate.ep[0].I = size/element_size;
        } else {
            istate.ep[0].I = -1;
        }
    } else {
	istate.ep[0].I = 0;
    }

    return 1;
}

/*
 * FILESCAN (read (scanf) integer value from the top of stack to a file)
 * 
 * bytecode:
 * FILESCAN
 * 
 * stack:
 * ..., file, value --> file
 * 
 * Read (scanf) an integer value from a file to the top of stack;
 * leave the file value on the top.
 */

int @PREFIX1@FILESCAN( INSTRUCTION_FN_ARGS )
{
    bytecode_file_hdr_t *file = STACKCELL_PTR( istate.ep[0] );
    FILE *fp = file ? file->fp : NULL;
    /* char *format = file ? file->string_scanf_format : NULL; */
    int value;
    int nval;

    TRACE_FUNCTION();

    if( !file ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              "attempt to scan an integer value from a file "
              "which was never opened",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_NULL_ERROR,
              EXCEPTION );
	return 0;
    }

    if( !fp ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              "attempt to scan an integer value from a closed file",
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_NULL_ERROR,
              EXCEPTION );
	return 0;
    }

    nval = fscanf( fp, "%d", &value );

    if( nval != 1 ) {
	interpret_raise_exception_with_bcalloc_message
            ( /* err_code = */ -1,
              /* message = */
              (char*)
              cxprintf( "error scanning interger value from a file - %s",
                        strerror(errno) ),
              /* module_id = */ 0,
              /* exception_id = */ SL_EXCEPTION_FILE_READ_ERROR,
              EXCEPTION );
	return 0;        
    }

    istate.ep --;
    istate.ep[0].I = value;

    return 1;
}

/*
 * FILEPRINT (print integer value from the top of stack to a file)
 * 
 * bytecode:
 * FILEPRINT
 * 
 * stack:
 * ..., file, integer --> file
 * 
 * Print an integer value to a file from the top of stack and remove
 * it; leave the file value on the top. The format for printing is
 * taken from the file structure.
 */

int @PREFIX1@FILEPRINT( INSTRUCTION_FN_ARGS )
{
    bytecode_file_hdr_t *file = STACKCELL_PTR( istate.ep[1] );
    FILE *fp = file->fp;
    char *format = file->int_format.ptr;

    TRACE_FUNCTION();

    if( !format ) {
	format = "%@printformat@";
    }

    fprintf( fp, format, istate.ep[0].I );
    istate.ep ++;

    return 1;
}

/*
 * NthBYTE Return the N-th byte of a number; the least significan byte
 * has index 0. Return 0 if the byte is not available.
 *
 * bytecode:
 * NthBYTE
 *
 * stack:
 * index --> signed_byte
 *
 */

int @PREFIX1@NthBYTE( INSTRUCTION_FN_ARGS )
{
    int index = istate.ep[0].num.i;
    @type@ value = istate.ep[1].I;

    TRACE_FUNCTION();

    istate.ep ++;

    istate.ep[0].num.b = (value >> (8*index)) & 0xFF;

    return 1;    
}

/*
 * SUBARRAY -- return an allocated sub-array 
 * 
 * bytecode:
 * SUBARRAY
 * 
 * stack:
 * ..., array, lower_bound, upper_bound --> subarray
 * 
 */

int @PREFIX1@SUBARRAY( INSTRUCTION_FN_ARGS )
{
    @type@ upper_bound = istate.ep[0].I;
    @type@ lower_bound = istate.ep[1].I;
    void **array = STACKCELL_PTR( istate.ep[2] );
    alloccell_t *array_header;
    void **subarray = NULL;
    ssize_t length, nref;
    @type@ original_upper_bound, original_lower_bound;

    TRACE_FUNCTION();

    if( array ) {
        array_header = ((alloccell_t*)array) - 1;
        length = array_header->length;
        original_upper_bound = upper_bound;
        original_lower_bound = lower_bound;
        if( upper_bound < 0 || lower_bound < 0 ) {
            if( upper_bound < 0 ) {
                upper_bound += length;
            }
            if( lower_bound < 0 ) {
                lower_bound += length;
            }
        }
        if( upper_bound < 0 || upper_bound >= length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -1,
                  /* message = */
                  (char*)cxprintf( "upper bound '%lld' is out of range "
                                   "0..%lld in subarray",
                                   (llong)original_upper_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }
        if( lower_bound < 0 || lower_bound >= length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -2,
                  /* message = */
                  (char*)cxprintf( "lower bound '%lld' is out of range "
                                   "0..%lld in subarray",
                                   (llong)original_lower_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }

        if( upper_bound < lower_bound ) {
            STACKCELL_ZERO_PTR( istate.ep[2] );
        } else {
            length = upper_bound - lower_bound + 1;
            nref = array_header->nref;

            subarray = bcalloc_array( nref == 0 ?
                                      sizeof(stackunion_t) : REF_SIZE,
                                      length, nref > 0 ? 1 : 0,
                                      EXCEPTION );
            BC_CHECK_PTR( subarray );

            if( nref > 0 ) {
                memcpy( subarray, &array[lower_bound], REF_SIZE * length );
            } else {
                memcpy( subarray, &(((stackunion_t*)array)[lower_bound]),
                        sizeof(stackunion_t) * length );
            }

            STACKCELL_SET_ADDR( istate.ep[2], subarray );
        }
    }

    istate.ep += 2;

    return 1;
}

/*
 * SUBSTR -- return an allocated substring
 * 
 * bytecode:
 * SUBSTR element_size
 * 
 * stack:
 * ..., string, lower_bound, upper_bound --> substring
 * 
 */

int @PREFIX1@SUBSTR( INSTRUCTION_FN_ARGS )
{
    @type@ upper_bound = istate.ep[0].I;
    @type@ lower_bound = istate.ep[1].I;
    char *str = STACKCELL_PTR( istate.ep[2] );
    ssize_t element_sz = istate.code[istate.ip+1].ssizeval;
    alloccell_t *str_header;
    char *substr = NULL;
    ssize_t length;
    @type@ original_upper_bound, original_lower_bound;

    TRACE_FUNCTION();

    if( str ) {
        str_header = ((alloccell_t*)str) - 1;
        length = strnlen( str, str_header->length );
        original_upper_bound = upper_bound;
        original_lower_bound = lower_bound;
        if( upper_bound < 0 || lower_bound < 0 ) {
            if( upper_bound < 0 ) {
                upper_bound += length;
            }
            if( lower_bound < 0 ) {
                lower_bound += length;
            }
        }
        if( upper_bound < 0 || upper_bound > length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -1,
                  /* message = */
                  original_upper_bound >= 0 ?
                  (char*)cxprintf( "upper bound %lld "
                                   "is out of range 0..%lld in substring",
                                   (llong)upper_bound,
                                   (llong)(length-1)) :
                  (char*)cxprintf( "upper bound %lld (originally %lld) "
                                   "is out of range 0..%lld in substring",
                                   (llong)upper_bound,
                                   (llong)original_upper_bound,
                                   (llong)(length-1)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }
        if( lower_bound < 0 || lower_bound > length ) {
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -2,
                  /* message = */
                  original_lower_bound >= 0 ?
                  (char*)cxprintf( "lower bound %lld"
                                   " is out of range 0..%lld in substring",
                                   (llong)lower_bound,
                                   (llong)(length)) :
                  (char*)cxprintf( "lower bound %lld (originally %lld)"
                                   " is out of range 0..%lld in substring",
                                   (llong)lower_bound,
                                   (llong)original_lower_bound,
                                   (llong)(length)),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_BOUND_ERROR,
                  EXCEPTION );
            return 0;
        }

        if( upper_bound < lower_bound - 1 ) {
            STACKCELL_ZERO_PTR( istate.ep[2] );
        } else {
            length = upper_bound - lower_bound + 1;

            substr = bcalloc_blob( (length + 1) * element_sz, EXCEPTION );
            BC_CHECK_PTR( substr );

            strncpy( substr, &str[lower_bound], element_sz * length );
            substr[length] = '\0';

            STACKCELL_SET_ADDR( istate.ep[2], substr );
        }
    }

    istate.ep += 2;

    return 2;
}

/*
 * ATOI  Convert an ASCII string to number in the machine's representation
 *
 * bytecode:
 * ATOI
 *
 * stack:
 * ..., str -> ..., integer
 */

#define atob atoi
#define atos atoi

int ATO@PREFIX@( INSTRUCTION_FN_ARGS )
{
    char *str = STACKCELL_PTR( istate.ep[0] );

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[0] );

    if( !str ) {
	istate.ep[0].I = 0;
    } else {
        istate.ep[0].I = ato@field@( str );
    }

    return 1;
}

#undef atob
#undef atos

/*
 * STRTOI Convert an ASCII string to number in the machine's
 *        representation, using the specified base.
 *
 * bytecode:
 * STRTOI
 *
 * stack:
 * ..., str, base -> ..., integer, ssize
 */

#define strtoc  strtoul
#define strtoui strtoul
#define strtous strtoul
#define strtoub strtoul

int STRTO@PREFIX@( INSTRUCTION_FN_ARGS )
{
    char *str = STACKCELL_PTR( istate.ep[1] );
    int base = istate.ep[0].num.i;
    char *endptr = NULL;

    TRACE_FUNCTION();

    STACKCELL_ZERO_PTR( istate.ep[1] );

    if( !str ) {
	istate.ep[1].I = 0;
        istate.ep[0].num.ssize = -1;
    } else {
        ullong value;
        errno = 0;
        value = strto@field@( str, &endptr, base );
        if( errno || value > @type_max@ ) {
            char *errmsg = errno ? strerror(errno) : "unsigned value too large";
            interpret_raise_exception_with_bcalloc_message
                ( /* err_code = */ -3,
                  /* message = */ (char*)cxprintf
                  ( "%s - '%s' %c%s", __FUNCTION__,
                    str, tolower(errmsg[0]),
                    errmsg[0] ? errmsg+1 : "" ),
                  /* module_id = */ 0,
                  /* exception_id = */ SL_EXCEPTION_TRUNCATED_INTEGER,
                  EXCEPTION );
            return 0;
        }
        istate.ep[0].num.ssize = endptr - str;
        istate.ep[1].I = value;
    }

    return 1;
}

#undef strtoc
#undef strtoui
#undef strtous
#undef strtoub

/* Conversion to floating-point numbers: */

/*
 * U2F converts integer value on the top of the stack to a ldouble 
 * 
 * bytecode:
 * U2F
 * 
 * stack:
 * unsigned integer -> float
 * 
 */

int @PREFIX1@2F( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[0].num.f = istate.ep[0].I;

    return 1;
}

/*
 * U2D converts integer value on the top of the stack to a ldouble 
 * 
 * bytecode:
 * U2D
 * 
 * stack:
 * unsigned integer -> double
 * 
 */

int @PREFIX1@2D( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[0].num.d = istate.ep[0].I;

    return 1;
}

/*
 * U2LD converts integer value on the top of the stack to a ldouble 
 * 
 * bytecode:
 * U2LD
 * 
 * stack:
 * unsigned integer -> double
 * 
 */

int @PREFIX1@2LD( INSTRUCTION_FN_ARGS )
{
    TRACE_FUNCTION();

    istate.ep[0].num.ld = istate.ep[0].I;

    return 1;
}
