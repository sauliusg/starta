#
# Snail language compiler tests
#
#
# Check diagnostics of missing "jnz" and "jz" operators, and of the
# incompatible shortcut boolean operands.
#


// include "inputs/stdtypes.slib"

type string = {
    size = 4;
    kind = string;
    reference;
    suffix = "";

    inline bytecode operator "." ( i : string )
        { SPRINT NEWLINE };

    inline bytecode operator "ldc" () : string
        { SLDC };
}

type int = {
    size = 4; kind = integer;

    inline bytecode operator "+" ( i : int; j : int ) : int
        { ADD };
    inline bytecode operator "-" ( i : int; j : int ) : int
        { SUB };
    inline bytecode operator "*" ( i : int; j : int ) : int
        { MUL };
    inline bytecode operator "/" ( i : int; j : int ) : int
        { DIV };
    inline bytecode operator "%" ( i : int; j : int ) : int
        { MOD };

    bytecode inline operator "<" ( x, y : int ) : int
        { LT };
    bytecode inline operator ">" ( x, y : int ) : int
        { GT };
    bytecode inline operator "<=" ( x, y : int ) : int
        { LE };
    bytecode inline operator ">=" ( x, y : int ) : int
        { GE };
    bytecode inline operator "==" ( x, y : int ) : int
        { EQ };
    bytecode inline operator "!=" ( x, y : int ) : int
        { NE };

    inline bytecode operator "++" ( i : int ) : int
        { INC };
    inline bytecode operator "--" ( i : int ) : int
        { DEC };
    inline bytecode operator "incvar" ()
        { INCVAR };
    inline bytecode operator "decvar" ()
        { DECVAR };
    inline bytecode operator "." ( i : int )
        { IPRINT NEWLINE };

    inline bytecode operator "ldc" () : int
        { LDCS };
}

type long = {
    size = 8; kind = integer; suffix = "L";

    inline bytecode operator "+" ( i : long; j : long ) : long
        { LADD };
    inline bytecode operator "-" ( i : long; j : long ) : long
        { LSUB };
    inline bytecode operator "*" ( i : long; j : long ) : long
        { LMUL };
    inline bytecode operator "/" ( i : long; j : long ) : long
        { LDIV };
    inline bytecode operator "%" ( i : long; j : long ) : long
        { LMOD };

    bytecode inline operator "<" ( x, y : long ) : long
        { LLT };
    bytecode inline operator ">" ( x, y : long ) : long
        { LGT };
    bytecode inline operator "<=" ( x, y : long ) : long
        { LLE };
    bytecode inline operator ">=" ( x, y : long ) : long
        { LGE };
    bytecode inline operator "==" ( x, y : long ) : long
        { LEQ };
    bytecode inline operator "!=" ( x, y : long ) : long
        { LNE };

    inline bytecode operator "++" ( i : long ) : long
        { LINC };
    inline bytecode operator "--" ( i : long ) : long
        { LDEC };
    inline bytecode operator "incvar" ()
        { LINCVAR };
    inline bytecode operator "decvar" ()
        { LDECVAR };

    inline bytecode operator "." ( i : long )
        { LPRINT NEWLINE };

    inline bytecode operator "@long" ( i : int ) : long
        { EXTEND };

    inline bytecode operator "ldc" () : long
        { LLDCS }
}

function writeln( s : string )
begin
    bytecode { LD %s SPRINT NEWLINE }
end

function write( s : string )
begin
    bytecode { LD %s SPRINT }
end

writeln( "So, let's see how it works:" );

var a, b, c, d : int;
var e, f, g, h : long;

a = 1;
b = 2;
c = 3;
d = 4;

write( "First if: " );
if a > b then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

write( "Second if: " );
if a > b && f < g then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

write( "Third if: " );

forward function incn( x : int; n : int ) : int;

a = incn( a, 1 );

if g == h || c == d then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

function incn( x : int; n : int ) : int
{
    bytecode { LD %x LD %n ADD }
}
