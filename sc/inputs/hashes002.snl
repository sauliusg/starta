
from std use *;

type hash of T = ?{
    reference;

    inline bytecode operator "new[int]" ( i : int ) : hash of T
    { HASHALLOC %%element_size %%element_nref %%element_align };

    inline bytecode operator "[string]" ( h : hash of T; key : string ) 
        : addressof
    { HASHADDR %%element_size };

    inline bytecode operator "ldx" ( h : ref /*addressof*/; key : string ) : T
    { HASHVAL %%element_size };

    inline bytecode operator "pldx" ( h : ref /*addressof*/; key : string ) : T
    { HASHPTR }
};

null struct S {
     name : string;
     dict : hash of string;
     idict : hash of int;
     val : int;
}

type dict = hash of string;
type dict1 = hash of string;
type idict = hash of int;

var lookup_table : hash of int;

var d : dict;
var dd : dict;
var id : idict = new hash [200] of int;

var d1 = new hash [20] of string;

dd = new hash [241] of string;

. dd["%s" %% "one"];

var s = new S;

s.dict = new hash [300] of string;
s.idict = new hash [300] of int;

. s.dict["%s" %% "something"];

. "===========";

dd["%s" %% "new key"] = "val";
dd["%s" %% "another key"] = "val2";
// bytecode { PLD %dd HASHDUMP }

. dd["%s" %% "new key"];
. dd["%s" %% "another key"];
. dd["%s" %% "no key"];

id["%s" %% "ATOM"] = 1234;
id["%s" %% "SIGATM"] = 4567;
. id["%s" %% "ATOM"];
. id["%s" %% "SIGATM"];
. id["%s" %% "NOKEY"];

. "===========";

s.dict["%s" %% "one"] = "vienas";
s.dict["%s" %% "two"] = "du";
s.dict["%s" %% "three"] = "trys";
 
. s.dict["%s" %% "one"];
. s.dict["%s" %% "two"];
. s.dict["%s" %% "three"];
. s.dict["%s" %% "four"];

s.idict["%s" %% "one"] = 1;
s.idict["%s" %% "two"] = 2;
s.idict["%s" %% "three"] = 3;

. s.idict["%s" %% "one"];
. s.idict["%s" %% "two"];
. s.idict["%s" %% "three"];
. s.idict["%s" %% "four"];
