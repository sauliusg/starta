#
# Snail language compiler tests
#

# Test 'dictionary of T', using the inline 'new' operator to pass
# compile time parameters.

from std use *;

type hash of T = ?{
    reference;

    inline bytecode operator "new[int]" ( i : int ) : hash of T
    { HASHALLOC %%element_size %%element_nref %%element_align };

    inline bytecode operator "[string]" ( h : hash of T; key : string ) 
        : addressof
    { HASHADDR %%element_size };

    inline bytecode operator "ldx" ( h : ref /*addressof*/; key : string ) : T
    { HASHVAL %%element_size };

    inline bytecode operator "pldx" ( h : ref /*addressof*/; key : string ) : T
    { HASHPTR }
};

type dictionary of X = null struct {
    h : hash of X;
    length : int;

    inline bytecode operator "new" (): dictionary of X
    {
        ALLOCVMT %%alloc_size %%nref %%vmt_offset
        DUP
        OFFSET const((dictionary of X).h.offset) // -36
        LDC 100
        HASHALLOC %%element_size %%element_nref %%element_align
        PSTI
        SLDC "HERE!"
        SPRINT NEWLINE
    }

    inline operator "[string]" ( d : dictionary of X; key : string ) 
        : addressof
    {
      LD %d
      OFFSET const((dictionary of X).h.offset)
      PLDI
      LD %key
      HASHADDR %%element_size
    };

    inline bytecode operator "ldx" ( d : ref; key : string ) : X
    {
      SWAP
      OFFSET const((dictionary of X).h.offset)
      PLDI
      SWAP
      HASHVAL %%element_size
    };

    inline bytecode operator "pldx" ( d : ref /*addressof*/; key : string ) : X
    { 
      SWAP
      OFFSET const((dictionary of X).h.offset) 
      PLDI
      SWAP
      HASHPTR 
    }
}

var d : dictionary of int;

d = new (dictionary of int);

d["one"] = 123;
d["two"] = 234;

. "Fetching dictionary values:";
. "one =>", d["one"];
. "two =>", d["two"];
. "three =>", d["three"];
