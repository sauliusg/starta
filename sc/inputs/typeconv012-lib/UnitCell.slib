//--*- C -*------------------------------------------------------------------*\
//$Author: saulius $
//$Date: 2015-05-20 22:28:10 +0300 (Wed, 20 May 2015) $ 
//$Revision: 48 $
//$URL: svn+ssh://saulius-grazulis.lt/home/saulius/svn-repositories/sgem-xray/trunk/lib/UnitCell.slib $
//---------------------------------------------------------------------------*/
//*
// Do unit cell calculations, e.g. compute the crystallographic unit
// cell volume.
//**

package UnitCell;

use * from std;
use * from Math;

var Pi = 4.0D * atan2(1,1);

function cell_volume( float cell[] ) : double, double
{
    var a, b, c, alpha, beta, gamma : double;
    var sg, ca, cb, cg : double;
    var V, sigV : double; // cell volume and standard deviation

    a, b, c = cell[0], cell[1], cell[2];
    alpha = Pi * cell[3]@double / 180.0D;
    beta  = Pi * cell[4]@double / 180.0D;
    gamma = Pi * cell[5]@double / 180.0D;

    ca = cos( alpha );
    cb = cos( beta );
    cg = cos( gamma );

    sg = sin( gamma );

    // Compute the unit cell volume:

    var D = sg*sg - ca*ca - cb*cb + 2.0D*ca*cb*cg;
    V = a * b * c * sqrt( D );

    if( length(cell) > 6 ) {
        // Compute unit cell volume standard deviation, using "error
        // propagation" method:
        var sa = sin(alpha);
        var sb = sin(beta);
        var siga, sigb, sigc : double;
        siga, sigb, sigc = cell[6], cell[7], cell[8];

        var sigalpha, sigbeta, siggamma : double;
        sigalpha = Pi * cell[9] @double / 180.0D;
        sigbeta  = Pi * cell[10]@double / 180.0D;
        siggamma = Pi * cell[11]@double / 180.0D;

        var dVda = sigalpha * sa * (ca - cb * cg ) / D;
        var dVdb = sigbeta * sb * (cb - ca * cg ) / D;
        var dVdg = siggamma * sg * (cg - ca * cb ) / D;
        sigV = V * sqrt((siga/a) ** 2.0D + (sigb/b) ** 2.0D + (sigc/c) ** 2.0D
                        + dVda ** 2.0D + dVdb ** 2.0D + dVdg ** 2.0D );
    }
    return V, sigV;
}

end package UnitCell
