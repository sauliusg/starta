
module F2C;

from std use *;

type F = float;
type C = float;

inline bytecode function F_as_float( t : F ): float {};
inline bytecode function float_as_C( x : float ): C {};

procedure C_from_F( t : F ): C
{
    pragma float;
    return float_as_C((F_as_float(t) - 32) * 5/9);
}

end module F2C;

// from std use *;
from F2C use *;

. C_from_F(  32 F );
. C_from_F(  80 F );
. C_from_F( 100 F );
