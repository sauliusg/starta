
use std;

interface If {
    method f( x : int ): int;
    method s() : string;
}

. "If.f.offset =", const(If.f.offset);
. "If.s.offset =", const(If.s.offset);

. "there";

interface Ig {
    method g( x, y, z : int ): int;
    method s() : string;
}

class S implements If, Ig {
    int i;
    float k;

    method g @ Ig( x, y, z :  int ) : int
    {
        return x + y - z + 2
    }
    method f @ If( x : int ) : int
    {
        return x * x;
    }
    method s @ If() -> (string)
    {
        return "This is S implementtion of If.s()"
    }
    method s @ Ig() -> (string)
    {
        return "This is S implementtion of Ig.s()"
    }
}

. "S.size = ", const(S.size)/const(S.i.size);

var s = new S;

. s->s@If();
. s->s@Ig();

. "here";
