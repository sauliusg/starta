#
# Snail compiler tests
#
#
# Test struct and class methods
#

from std use *;

type P = null class {
// class P {
     int x;
     int i;

     method g() : int { return 0; }
     method h( int a ) : int { var old_x = self.x; self.x = a; return old_x }
     method t() : int { return self.x / self.i }
}

null class S : P {
    int i;
    string name;
    P next;
    gg : function (int i) -> (int);
    function (int i) -> (int) ff;

    inline bytecode operator "+"(S a, b) : S { };
    inline bytecode operator "-"(S a, b) : S { }

    method h(int x) : int;
    method h(int x) : int { return self.i*self.i + x }
    method f(int x) : int { return self.i * x }
    method k(int x; int y) : float {return (self.i)@float * x@float * y@float}

    inline bytecode operator "*"(S a, b) : S { return null };
};

var s = new S;

. "S.f.offset (new)        =", const(S.f.offset);
. "S.h.offset (overloaded) =", const(S.h.offset);
. "S.g.offset (inherited)  =", const(S.g.offset);
. "S.k.offset (new)        =", const(S.k.offset);
. "S.t.offset (inherited)  =", const(S.t.offset);

. "-------------";

. "s.name offset =", const(s.name.offset/s.name.size);
. "s.next offset =", const(s.next.offset/s.next.size);
. "s.i    offset =", const(s.i.offset/s.i.size);

. "-------------";

// bytecode { PLD %s DUMPVMT }

. "-------------";

s.i = 6;

s.name = "class S";

. s->f(5);
. s->h(5);
