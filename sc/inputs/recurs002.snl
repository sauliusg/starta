#
# Snail language compiler tests
#
#
# Recursive function tests
#

#
# Calculate factorial using recursive funtion calls.
#

type int = {
    size = 4;
    bytecode inline operator "+" ( x : int; y : int ) : int
        { bytecode{ ADD }};
    bytecode inline operator "-" ( x : int; y : int ) : int
        { bytecode{ SUB }};
    bytecode inline operator "*" ( x : int; y : int ) : int
        { bytecode{ MUL }};
    bytecode inline operator "/" ( x : int; y : int ) : int
        { bytecode{ DIV }};
    bytecode inline operator "%" ( x : int; y : int ) : int
        { bytecode{ MOD }};
    bytecode inline operator "<=" ( x, y : int ) : int
        {bytecode{ LE }};
    bytecode inline operator ">" ( x, y : int ) : int
        {bytecode{ GT }};
    bytecode inline operator "." ( i : int )
        { IPRINT };
    bytecode inline operator "jnz" ( x : int )
        { JNZ };
    bytecode inline operator "jz" ( x : int )
        { JZ };
    inline bytecode operator "ldc" () : int
        { LDCS };
    inline bytecode operator "loop" ( counter : addressof; range : int )
        { LOOP };
};

function factorial( n : int ) : int
{
    if n <= 1 then
        return 1;
    else
        return factorial( n - 1 ) * n;
    endif
};

var i : int;
var j : int;

for i = 0 to 10 do
    . factorial( i );
enddo;
