
use std;

type myint = {
    kind = integer;
    suffix = "I";
    size = sizeof native "int";

    inline bytecode operator "ldc" () : myint
    { LDCS }
};

begin
    inline bytecode operator "st" ( i : myint )
    {
        SLDC "type 'myint' has a special ST operator in the inner scope 1\n"
        SPRINT
        ST
    }
end

inline bytecode operator "+" ( a, b : myint ): myint
{ ADD }

inline bytecode operator "." ( i : myint )
{ IPRINT }

function f( x : myint )
{
    . x;
}

f( 222I );

function g( x: int; p: function ( i : myint ) )
{
    . x;
    p( 10I );
}

g( 101, closure ( ii : myint ) my { i = 20I } { . "closure:", ii + my.i } );

begin
    inline bytecode operator "st" ( i : myint )
    {
        SLDC "type 'myint' has a special ST operator in the inner scope 2\n"
        SPRINT
        ST
    }

    var t = 120I;

    g( 101, closure( ii : myint ) my { ii = t } { . "closure2:", ii + my.ii } );
end

