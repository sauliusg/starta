
use std;

null interface If {
    method f( x : int ): int;
    method s() : string;
}

. "If.f.offset =", const(If.f.offset);
. "If.s.offset =", const(If.s.offset);

. "there";

null interface Ig {
    method g( x : int ): int;
    method s() : string;
}

null class S implements If, Ig {
    int i;
    float k;

    method g implements Igg.g( x :  int ) : int
    {
        return x + 2
    }
    method f implements f( x : int ) : int
    {
        return x + 4;
    }
    method sf implements Iff.ss() -> (string)
    {
        return "This is S implementtion of If.s()"
    }
    method sg implements Module::Igg.ss() -> (string)
    {
        return "This is S implementtion of Ig.s()"
    }
}

. "S.size = ", const(S.size);

var s = new S;

## s->a(20);

. "here";

