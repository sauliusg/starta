#
# Snail compiler tests
#
#
# Test alignemnt of fields in arrays and structures.
#

include "inputs/stdtypes.slib"

procedure f( i : int ) : int
{
    return i + 1;
}

exception ZeroDivision;
exception AnotherError;

procedure g( i : int ) : int
{
    if( i != 0 ) then
        return f( i ) / i
    else
        . "about to raise exception in g()";
        raise ZeroDivision( 11, "divison by 0 in g()" )
    endif
}

. "Before try\n";

inline bytecode procedure iwrite( i : int )
{
    IPRINT
}

inline bytecode procedure swrite( s : string )
{
    SPRINT
}

inline bytecode procedure nl()
{
    NEWLINE
}

try {

    try {
        . "Within TRY block, before g() call";
        . g( 2 );
        . g( 1 );
        . g( 0 );
        . "Within TRY block, after g() call\n";
    }

    catch ZeroDivision {
        swrite( "Cought exception 11, and thats it...\n" );
	try {
	    . "   Try block within the catch statement:";
            g( 0 );
        }
        catch( var msg : string; var err : int ) {
	    swrite( "   cought exception " );
            iwrite( err );
            swrite( " in the inner try/catch block,\n" );
            swrite( "   " );
            swrite( "with the message:\n" );
            swrite( "   \"" );
            swrite( msg );
            swrite( "\"\n" );
        }
    }
    catch AnotherError {
        swrite( "Cought exception 12, and thats it...\n" );
    }
    catch( var msg : string ) {
        swrite( "*** exception " );
        swrite( msg );
        nl();
    }
}
catch ZeroDivision {
    swrite( "Cought exception 11 for the second time\n" );
}
catch AnotherError {
    swrite( "Cought exception 12 for the second time\n" );
}
catch( var msg : string ) {
    swrite( "*** second catch: exception " );
    swrite( msg );
    nl();
}


. "After catch";
