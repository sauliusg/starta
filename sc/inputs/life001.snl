#
# Yes, it is Life!
#
# Worlds arguably most famous cellular automaton now implemented
# in HLC!
#
# Saulius Grazulis, Byjsk,    2003.10.17
# Saulius Grazulis, Kaunas,   2003.10.26
# Saulius Grazulis, Orenburg, 2006.08.18
#

## include "stdtypes.slib"

use * from std;

type Cell = int;

inline bytecode procedure writestr( s : string )
{
    SPRINT
}

procedure generation( newfield, field : array [][] of Cell ) : int, int
begin
    var i, j : int;
    var sum : Cell;
    var max_i : int = last( field );
    var max_j : int = last( field[0] );
    var i1, i2 : int;
    var j1, j2 : int;
    var nchanges, nones : int;

    for i = 0 to last( field ) do
        for j = 0 to last( field[i] ) do

	    i1 = i > 0 ? i - 1 : max_i;
	    i2 = i < max_i ? i + 1 : 0;
	    j1 = j > 0 ? j - 1 : max_j;
	    j2 = j < max_j ? j + 1 : 0;

            sum = field[i1][j1] + field[i1][j] +  field[i1][j2] +
                  field[i][j1]  + field[i][j2] +
                  field[i2][j1] + field[i2][j] +  field[i2][j2];

	    if( sum < 2 Cell or sum > 3 Cell ) then
                newfield[i][j] = 0 Cell
            else
                if( sum == 3 Cell ) then
                    newfield[i][j] = 1 Cell
                else
                    newfield[i][j] = field[i][j];
                endif
            endif

	    if( newfield[i][j] != field[i][j] ) then
		nchanges ++;
	    endif

	    if( newfield[i][j] == 1 Cell ) then
		nones ++;
	    endif

        enddo
    enddo

    return nchanges, nones;
end

function glider() : array [][] of Cell
{
    var field = new Cell[20][20];

    field[3][3] = 1 Cell;
    field[2][4] = 1 Cell;
    field[2][5] = 1 Cell;
    field[3][5] = 1 Cell;
    field[4][5] = 1 Cell;

    return field;
}

procedure printfield( f : array [][] of Cell )
{
    var i, j : int;

    for i = 0 to last(f) {
        for j = 0 to last(f[i]) {
            writestr( f[i][j] == 0 Cell ? "." : "o" );
        }
        . "";
    }
    . "";
}

## program life( string argv[] );
var argv = arguments();

var generations = 10;

var field : array [][] of Cell;

field = glider();

var newfield : array [][] of Cell = new Cell[length(field)][length(field[0])];

printfield( field );

var gen : int = 1;

var nchanges, nones : int;

while( gen <= generations ) {
    nchanges, nones = generation( newfield, field );
    field, newfield = newfield, field;
    writestr( "Generation: " );
    < gen;
    writestr( " Organisms: " );
    . nones;
    printfield( field );
    if( nchanges == 0 ) then
        writestr( "Stable configuration reached.\n" );
	break;
    endif
    //sleep( 800000 );
    gen ++;
}
