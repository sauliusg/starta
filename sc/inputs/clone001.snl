#
# Snail compiler tests
#
#
# Testing cloning of arrays.
#

use * from std;

var p = [
    [ 12.0, 13.0, 14.0, 15.0, 16.0 ],
    [ 22.0, 23.0, 24.0, 25.0, 26.0 ],
    [ 32.0, 23.0, 34.0, 35.0, 37.0 ],
    [ 42.0, 43.0, 44.0, 45.0, 47.0 ],
];

procedure shift( p: array of float; float amount ): array of float
{
    var new_p = p[];
    for( var i = 0; i < length(p); i++ ) {
        new_p[i] += amount;
    }
    return new_p;
}

procedure print_array( p: array of float )
{
    for( var i = 0; i < length(p); i++ ) {
        < p[i], " ";
    }
    . "";
}

procedure print_2d_array( p: array [][] of float )
{
    for( var i = 0; i < length(p); i++ ) {
        print_array( p[i] );
    }
}

procedure generic_shift( p : type T;
                         shifter: procedure (p:T; amount:float)->(T);
                         printer: procedure (p:T)
                       ): type T
{
    var new_p: array [] of T = new T[2+1];
    var e = new float[length(new_p)];

    new_p[0] = p;
    for( var i = 1; i < length(new_p); i++ ) {
        new_p[i] = shifter( p, i );
    }

    for( var i = 0; i < length(new_p); i++ ) {
        printer( new_p[i] );
    }

    // return new_p;
    return new_p[0];
}

print_2d_array( p );
. "";

var q: array of float = generic_shift( [0.0, 1.1], shift, print_array );
. "";

//print_array( q );

print_2d_array( p );
