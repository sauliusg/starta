
use std;

interface UnDoable {
    method undoable_do( x : int );
    method undo() : int;
}

class S implements UnDoable {
    int n;
    int buffer[];

    method name(): string
    {
        return "This is name() of S"
    }

    method undoable_do implements UnDoable.undoable_do( int x )
    {
        var old_buffer = self.buffer;
        self.buffer = new int[length(self.buffer) + 1];
        self.buffer := old_buffer;
        self.buffer[self.n] = x;
        self.n++;
    }
    method undo implements UnDoable.undo() : int
    {
        self.n--;
        return self.buffer[self.n];
    }
}

var s = new S;

. s->name();

s->undoable_do( 10 );
s->undoable_do( 12 );
s->undoable_do( 17 );

. s->undo();
. s->undo();
. s->undo();

// procedure pp( UnDoable d )
// {
//     d->undoable_do( 20 );
//     d->undoable_do( 21 );
//     d->undoable_do( 25 );
//     d->undoable_do( 26 );
// 
//     d->undo();
//     d->undo();
//     d->undo();
//     d->undo();
// }
// 
// pp( s );
