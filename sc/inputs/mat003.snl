#
# Snail language compiler tests
#
# Test of simple arithmetics.
#

type int = {
    size = sizeof native "int";
    kind = integer;

    inline bytecode operator "+" ( x : int; y : int ) : int
        { bytecode{ ADD }};
    inline bytecode operator "-" ( x : int; y : int ) : int
        { bytecode{ SUB }};
    inline bytecode operator "*" ( x : int; y : int ) : int
        { bytecode{ MUL }};
    inline bytecode operator "/" ( x : int; y : int ) : int
        { bytecode{ DIV }};
    inline bytecode operator "%" ( x : int; y : int ) : int
        { bytecode{ MOD }};

    bytecode inline operator "!=" ( x, y : int ) : int
        { NE };
    bytecode inline operator ">" ( x, y : int ) : int
        { GT };

    inline bytecode operator "ld" () : int
	{ ILD };
    inline bytecode operator "st" ( i : int )
	{ IST };
    inline bytecode operator "ldi" ( a : addressof ) : int
	{ ILDI };
    inline bytecode operator "sti" ( a : addressof; i : int )
	{ ISTI };
    inline bytecode operator "ldc" () : int
	{ LDCS };
    inline bytecode operator "jnz" ( i : int )
	{ JNZ };
    inline bytecode operator "jz" ( i : int )
	{ JZ };
    inline bytecode operator "[]" ( a : array; i : int ) : addressof
        { INDEX };
    inline bytecode operator "new[]" ( i : int ) : array
        { AALLOC %%element_nref };
    inline bytecode operator "new[][]" ( i : int ) : array
        { MDALLOCC %%element_nref %%level };
    inline bytecode operator "loop" ( c : addressof; i : int )
        { LOOP };
    inline bytecode operator "." ( i : int )
        { IPRINT };
};

type string = {
    size = sizeof native "char*";
    kind = string;
    reference;
    suffix = "";

    inline bytecode operator "." ( i : string )
        { SPRINT };

    inline bytecode operator "ldc" () : string
        { SLDC };
}

var i, j, k : int;

type matrix = array of array of int;

var m, n, p : matrix;

var N : int;

N = 100;

m = new int [N][N];
n = new int [N][N];
p = new int [N][N];

for i = 0 to N - 1 do
    for j = 0 to N - 1 do
    	m[i][j] = 1;
    	n[i][j] = i;
    enddo;
enddo;

for i = 0 to N - 1 do
    for j = 0 to N - 1 do
    	p[i][j] = 0;
        for k = 0 to N - 1 do
	    p[i][j] += m[i][k] * n[k][j];
        enddo;
    enddo;
enddo;

. p[0][0];

p[21][35] = 101;

for i = 0 to N - 1 do
    for j = 0 to N - 1 do
    	if( p[i][j] != p[0][0] ) then
	    . i, j, p[i][j];
        endif
    enddo;
enddo;
