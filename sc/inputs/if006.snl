#
# Snail language compiler tests
#
#
# 'IF' and shortcut boolean expressions
#

// include "stdtypes.slib"

type char = {
    size = 1;
}

type int = {
    size = 4; kind = integer;

    inline bytecode operator "+" ( i : int; j : int ) : int
        { ADD };
    inline bytecode operator "-" ( i : int; j : int ) : int
        { SUB };
    inline bytecode operator "*" ( i : int; j : int ) : int
        { MUL };
    inline bytecode operator "/" ( i : int; j : int ) : int
        { DIV };
    inline bytecode operator "%" ( i : int; j : int ) : int
        { MOD };

    bytecode inline operator "<" ( x, y : int ) : int
        { LT };
    bytecode inline operator ">" ( x, y : int ) : int
        { GT };
    bytecode inline operator "<=" ( x, y : int ) : int
        { LE };
    bytecode inline operator ">=" ( x, y : int ) : int
        { GE };
    bytecode inline operator "==" ( x, y : int ) : int
        { EQ };
    bytecode inline operator "!=" ( x, y : int ) : int
        { NE };

    inline bytecode operator "++" ( i : int ) : int
        { INC };
    inline bytecode operator "--" ( i : int ) : int
        { DEC };
    inline bytecode operator "incvar" ()
        { INCVAR };
    inline bytecode operator "decvar" ()
        { DECVAR };
    inline bytecode operator "." ( i : int )
        { IPRINT NEWLINE };

    inline bytecode operator "[]" ( a : array; i : int ) : addressof
        { INDEX };

    inline bytecode operator "new[]" ( i : int ) : array
        { AALLOC %%element_nref };

    inline bytecode operator "new[][]" ( i : int ) : array
        { MDALLOCC };

    bytecode inline operator "jnz" ( x : int )
        { JNZ };
    bytecode inline operator "jz" ( x : int )
        { JZ };

    inline bytecode operator "ldc" () : int
        { LDCS };
}

type string = {
    size = 4;
    kind = string;
    reference;
    suffix = "";

    inline bytecode operator "." ( s : string )
        { SPRINT NEWLINE };

    inline bytecode operator "ldc" () : string
        { SLDC };
}

function writeln( s : string )
begin
    bytecode { LD %s SPRINT NEWLINE }
end

function write( s : string )
begin
    bytecode { LD %s SPRINT }
end

writeln( "So, let's see how it works:" );

var a, b, c, d : int;

a = 1;
b = 2;
c = 3;
d = 4;

write( "First if: " );
if a < b then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

c = d = 5;

write( "Second if: " );
if a > b and c < d then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

write( "Second if: " );
if a < b and c < d then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

write( "Fourth if: " );

forward function incn( x : int; n : int ) : int;

a = incn( a, 1 );

if ( a == b and c < d ) or ( c == d and d > b ) then
    writeln( "TRUE" );
else
    writeln( "FALSE" );
endif;

function incn( x : int; n : int ) : int
{
    bytecode { LD %x LD %n ADD }
}
