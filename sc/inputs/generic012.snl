// --*- C -*--

// This file illustrates a problem with the current generic type
// design. When a structure is declared with the field of generic
// type, the assumptions about the field alignment, offset and
// position hold only when a generic type field is the last field in
// the structure.

use * from std;

function sprinter( s : string ): string { . s; return s };
function iprinter( i : int ): int { . i; return i };
function fprinter( x : float ): float { . x; return x };

function supdater( s : string ): string { return s + " with extra part" };
function iupdater( i : int ): int { return i + 2 };
function fupdater( x : float ): float { return x + 1.5 };

procedure generic_procedure( s : null struct { int i; type T x }; 
                             function (x : type T)->(type T) xmanager )
{
    s.x = xmanager( s.x );
}

struct IS { int i; int j }
struct FS { int i; float f }

try {
    var p = new null struct { int i; string name };
    p.name = "Struct p";

    generic_procedure( p, sprinter );
    generic_procedure( p, supdater );
    generic_procedure( p, sprinter );
    . "";

    var is = struct IS { i => 2, j => 12 };
    generic_procedure( is, iprinter );
    generic_procedure( is, iupdater );
    generic_procedure( is, iprinter );
    . "";

    var fs = struct FS { i => 2, f => 3.14 };
    generic_procedure( fs, fprinter );
    generic_procedure( fs, fupdater );
    generic_procedure( fs, fprinter );
}
catch( var errno : int; var message : string ) {
    . message;
}
