// --*- C -*--

// Test new types passed to modules:

use std;

type point = like double[] {

    inline bytecode operator "ldc"(): point
    {
        DALDCS 2
    }

    operator "+" ( point a; point b ): point
    {
        var r : point = [ a[0]+b[0], a[1]+b[1] ];
        return r;
    }

    operator "*" ( point a; point b ): point
    {
        var r = [ a[0]*b[0], a[1]*b[1] ];
        return r;
    }

    operator "-" ( point a; point b ): point
    {
        return [ a[0]-b[0], a[1]-b[1] ]; 
    }

    inline bytecode operator "@point" ( d : double ): point
    {
        LDC 2 AALLOC %%element_size 0      (*   d -- d p *)
        SWAP                               (* d p -- p d *)
        OVER OVER                          (* p d -- p d p d *)
        DSTI                               (* p d p d -- p d *)
        OVER                               (* p d -- p d p *)
        LDC 1 INDEX SWAP                   (* p d p -- p p=&p[1] d *)
        DSTI                               (* p p d -- p *)
    }

};

use Verlet(point);

var p : point = 2.3D@point;

. "#", p[0], p[1];

pragma real const double;

var X, Y, Z: point;

X = [1.0, 1.0];
Y = [2.0, 2.0];

Z = X + Y;
. "#", Z[0], Z[1];

Z = Y * Z;
. "#", Z[0], Z[1];

readonly var x0 = [ 0.0, 1.0 ];
readonly var v0 = [ 1.0, 0.0 ];

var dt = 0.01;
var x: point;
var t: double;
var xprev = x0;

function force( point x ): point
{
    return [ -x[0], -x[1] ];
}

x = Verlet::start( x0, v0, force(x0), dt@point );
t += dt;

. t, x[0], x[1];

var int N = 1000;

var args = arguments();
if length(args) > 1 then
    N = strtoi( args[1] );
endif

for var int i = 1 to N do
    x, xprev = Verlet::step( xprev, x, force(x), dt ), x;
    t += dt;
    . t, x[0], x[1];
enddo;
