#! /usr/bin/env starta
/*--*- Java -*---------------------------------------------------------------*\
**$Author: saulius $
**$Date: 2017-05-14 20:19:09 +0300 (Sun, 14 May 2017) $ 
**$Revision: 3543 $
**$URL: svn+ssh://saulius-grazulis.lt/home/saulius/svn-repositories/paskaitos/VU/software/trunk/bioinformatika-III-assignments/bin/pdbchi1chi2 $
\*---------------------------------------------------------------------------*/
//*
// Starta programa, kuri kiekvienai liekanai skaičiuoja chi1 ir chi2
// dvisienius kampus.
//
// Programos iškvietimas:
// pdbchi1chi2 < 1zyx.pdb
// pdbchi1chi2 1zyx.pdb 2zyx*.pdb
//
//**
    
pragma prepend "$P/lib/starta";
pragma prepend "$P/lib";
    
use std;
use Strings;
use Math;
use BiomoleculeAtom;
use LoadBiomoleculeAtom;

var Id = "$Id: pdbchi1chi2 3543 2017-05-14 17:19:09Z saulius $";

. "#", Id[1:-2];

var fdebug = true;

//*EN: Flag which file format we are currently reading:
//*LT: Šiuo metu skaitomo failo formatas:
var current_format = PDB format;

var empty_atom = new Atom();
var atom = new Atom();
var chi1atoms = new Atom*new[4];
var chi2atoms = new Atom*new[4];

//*EN: Number of atoms available for computation of
//*EN: corresponding angles:
//*LT: Šiuo metu sukauptas atomų skaičius kampams skaičiuoti:
var chi1n, chi2n: int;

var residue_now, previous_residue: long;
var chain_now, previous_chain: string;

function dihedral( aa: array of Atom ): double;

var Pi = 4.0D * atan2(1,1);

var line = 0;

while(<>) {
    if( curreof() ) {
        line = 0;
    }
    line ++;
    if( strstart( "data_", $_ )) {
        current_format = PDBx format;
        continue;
    }
    if( strstart( "HEADER", $_ ) || strstart( "CRYST1", $_ ) ) {
        current_format = PDB format;
        continue;
    }

    if( current_format == PDB format && strstart( "ATOM  ", $_ ) ||
        current_format == PDBx format && strstart( "ATOM", $_ ) ||
        strstart( "HETATM", $_ )) {

        try {
            atom = load_atom_line( $_, current_format );
        }
        catch PDBline::INCORRECT_NUMBER_SYNTAX( var msg: string ) {
            var progname = argument(0);
            <stderrors()> << progname << ": " <<
                msg << " in file '" << currfilename() <<
                "', line " << ("%d" %% line) << "\n";
            chi1n = 0;
            chi1atoms[0] = chi1atoms[1] = chi1atoms[2] = chi1atoms[3] = empty_atom;
            chi2n = 0;
            chi2atoms[0] = chi2atoms[1] = chi2atoms[2] = chi2atoms[3] = empty_atom;
            previous_chain = null;
            continue;
        }

        do . ">>>", atom->asString() if fdebug;
    }

    chain_now = atom.chain;
    residue_now = atom.residueNumber;

    if( previous_chain == null ) {
        previous_chain = chain_now;
        previous_residue = residue_now;
    }

    //*EN: The residue has changed:
    //*LT: Aptinkame, kad peptido liekana pasikeitė:
    if( chain_now != previous_chain || residue_now != previous_residue ||
        curreof() ) {
        if( chi1n >= 4 || chi2n >= 4 ) {
            < "CHI12 ";
            //*EN: Residues with chi1 angle:
            //*LT: Liekanos chi1 kampui skaičiuoti:
            if( chi1n >= 4 ) {
                < "%7.2lf" %% dihedral( chi1atoms )
            } else {
                < "-";
            }
            < " ";
            //*EN: Residues with chi2 angles:
            //*LT: Liekanos chi2 kampui skaičiuoti:
            if( chi2n >= 4 ) {
                < "%7.2lf" %% dihedral( chi2atoms );
            } else {
                < "%7s" %% "-";
            }
            < " ";

            . currfilename(), chi1atoms[0].chain, chi1atoms[0].residueName,
                  chi1atoms[0].residueNumber;
        }

        chi1n = 0;
        chi1atoms[0] = chi1atoms[1] = chi1atoms[2] = chi1atoms[3] = empty_atom;
        chi2n = 0;
        chi2atoms[0] = chi2atoms[1] = chi2atoms[2] = chi2atoms[3] = empty_atom;
        previous_chain = null;
    }

    //*EN: FIXME -- So far, process only A alternative:
    //*LT: TAISYTI -- Kol kas skaičiuojama tik alternatyvi pozicija A:
    if( atom.altLoc == "" || atom.altLoc == "A" ) {

        if( atom.atomName == "C" ) {
            chi1atoms[0] = atom;
            chi1n ++;
        }
    
        if( atom.atomName == "CA" ) {
            chi1atoms[1] = atom;
            chi1n ++;
            chi2atoms[0] = atom;
            chi2n ++;
        }
    
        if( atom.atomName == "CB" ) {
            chi1atoms[2] = atom;
            chi1n ++;
            chi2atoms[1] = atom;
            chi2n ++;
        }
    
        if( atom.atomName == "SG" ||
            atom.atomName == "OG" ||
            atom.atomName == "CG1" ||
            atom.atomName == "OG1" ) {
            chi1atoms[3] = atom;
            chi1n ++;
        }

        if( atom.atomName == "CG" ) {
            chi1atoms[3] = atom;
            chi1n ++;
            chi2atoms[2] = atom;
            chi2n ++;
        }

        if( atom.atomName == "CD" ||
            atom.atomName == "CD1" ||
            atom.atomName == "OD1" ) {
            chi2atoms[3] = atom;
            chi2n ++;
        }
    }
}

function vcross( v1, v2 : array of double ): array of double
{
    return [
            v1[1]*v2[2] - v1[2]*v2[1],
            v1[0]*v2[2] - v1[2]*v2[0],
            v1[0]*v2[1] - v1[1]*v2[0]
           ];
}

function vdot( v1, v2 : array of double ): double
{
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
}

function vlength( v: array of double ): double
{
    return sqrt(vdot(v,v));
}

function dihedral( aa: array of Atom ): double
{
    var vectors = [
                   [ aa[0].x-aa[1].x, aa[0].y-aa[1].y, aa[0].z-aa[1].z ],
                   [ aa[2].x-aa[1].x, aa[2].y-aa[1].y, aa[2].z-aa[1].z ],
                   [ aa[3].x-aa[2].x, aa[3].y-aa[2].y, aa[3].z-aa[2].z ],
                  ];

    var n1 = vcross( vectors[0], vectors[1] );
    var n2 = vcross( vectors[2], vectors[1] );
    var dotprod = vdot( n1, n2 )/(vlength(n1)*vlength(n2));
    var sign = vdot( vcross(n2,n1), vectors[1] ) > 0.0D ? +1.0D : -1.0D;
    
    return sign * 180.0D * acos( dotprod ) / Pi;
}
