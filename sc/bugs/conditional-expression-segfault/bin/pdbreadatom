#! /usr/bin/env starta
/*--*- Java -*---------------------------------------------------------------*\
**$Author: saulius $
**$Date: 2017-05-08 18:45:23 +0300 (Mon, 08 May 2017) $ 
**$Revision: 3486 $
**$URL: svn+ssh://saulius-grazulis.lt/home/saulius/svn-repositories/paskaitos/VU/software/trunk/bioinformatika-III-assignments/bin/pdbreadatom $
\*---------------------------------------------------------------------------*/
//*
// Starta programa, kuri kiekvienam atomui suskaičiuoja jo atstumą
// iki baltymo geometrinio centro.
//
// Programos iškvietimas:
// pdbPr < 1zyx.pdb
// pdbPr 1zyx.pdb 2zyx*.pdb
//
//**
    
pragma prepend "$P/lib/starta";
pragma prepend "$P/lib";
    
use std;
use Strings;
use BiomoleculeAtom;
use PDBline;
use PDBxline;

var Id = "$Id: pdbreadatom 3486 2017-05-08 15:45:23Z saulius $";

. "#", Id[1:-2];

// Flag which file format we are currently reading:
type format = enum byte( PDB, PDBx );
var current_format = PDB format;

exception FORMAT_ERROR;

var atom = new Atom();
var molecule: array of Atom;

while(<>) {
    if( strstart( "data_", $_ )) {
        current_format = PDBx format;
        continue;
    }
    if( strstart( "HEADER", $_ ) || strstart( "CRYST1", $_ ) ) {
        current_format = PDB format;
        continue;
    }
    if( current_format == PDB format && strstart( "ATOM  ", $_ ) ||
        current_format == PDBx format && strstart( "ATOM", $_ ) ||
        strstart( "HETATM", $_ )) {
        
        if( current_format == PDB format ) then
            atom = PDBline::split( $_ );
        elsif( current_format == PDBx format ) then
            atom = PDBxline::split( $_ );
        else
            raise FORMAT_ERROR( "unsupported format %d" %% current_format@int );
        endif;

        . atom->asString();
    }
}
