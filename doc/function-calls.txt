
=== Function calls, parameter passing and returning of values ===
=================================================================

Function calls behave like any other bytecode operator -- they remove
their arguments (if any) from the evaluation stack, and leave their
return values (if any) on the avaluation stack.

1. Function arguments are left on the evaluation stack in the order
they are computed (the first argument is pushed onto the evaluation
stack first);

2. Function MUST remove the arguments from the avaluation stack, and
after the computations it performs it MUST push the return values, in
the order they are listed in the 'return' statement, onto the
evaluation stack. In practice this means that return expressions are
evaluated and the computed values are just left on the valuation
stack.

The caller MUST consume the returned values properly -- either by
using them in further computations, or by dropping them.
